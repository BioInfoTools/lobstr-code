# Makefile.in generated by automake 1.11.1 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# Copyright (C) 2011 Melissa Gymrek <mgymrek@mit.edu>
#  
# This file is free software; as a special exception the author gives
# unlimited permission to copy and/or distribute it, with or without 
# modifications, as long as this notice is preserved.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY, to the extent permitted by law; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.


pkgdatadir = $(datadir)/STRanger
pkgincludedir = $(includedir)/STRanger
pkglibdir = $(libdir)/STRanger
pkglibexecdir = $(libexecdir)/STRanger
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
bin_PROGRAMS = lobSTR$(EXEEXT) strangers$(EXEEXT)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in TODO
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/acx_pthread.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am_lobSTR_OBJECTS = lobSTR-main.$(OBJEXT) \
	lobSTR-runtime_parameters.$(OBJEXT) \
	lobSTR-FastqFileReader.$(OBJEXT) \
	lobSTR-FastaFileReader.$(OBJEXT) \
	lobSTR-TextFileReader.$(OBJEXT) lobSTR-common.$(OBJEXT) \
	lobSTR-TabFileWriter.$(OBJEXT) lobSTR-TextFileWriter.$(OBJEXT) \
	lobSTR-STRDetector.$(OBJEXT) \
	lobSTR-MainLobeDetection.$(OBJEXT) \
	lobSTR-TukeyWindowGenerator.$(OBJEXT) \
	lobSTR-FFT_four_nuc_vectors.$(OBJEXT) \
	lobSTR-MicroSatelliteDetection.$(OBJEXT) \
	lobSTR-HammingWindowGenerator.$(OBJEXT) \
	lobSTR-CachedWindowGenerator.$(OBJEXT) \
	lobSTR-FFT_nuc_vectors.$(OBJEXT) lobSTR-GST.$(OBJEXT) \
	lobSTR-GSTContainer.$(OBJEXT) lobSTR-SuffixTree.$(OBJEXT) \
	lobSTR-NodeAlignment.$(OBJEXT) lobSTR-stree.$(OBJEXT) \
	lobSTR-MSTableFileReader.$(OBJEXT) \
	lobSTR-GenomeReader.$(OBJEXT) lobSTR-ReadAligner.$(OBJEXT) \
	lobSTR-SamFileWriter.$(OBJEXT) \
	lobSTR-MultithreadData.$(OBJEXT) lobSTR-Genotyper.$(OBJEXT) \
	lobSTR-AlignmentFileReader.$(OBJEXT) \
	lobSTR-EntropyDetection.$(OBJEXT)
lobSTR_OBJECTS = $(am_lobSTR_OBJECTS)
lobSTR_LDADD = $(LDADD)
am__DEPENDENCIES_1 =
lobSTR_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_strangers_OBJECTS = main_strangers.$(OBJEXT) \
	FastaFileReader.$(OBJEXT) FastqFileReader.$(OBJEXT) \
	AnonymizerMultiThreadData.$(OBJEXT) \
	runtime_parameters.$(OBJEXT) TextFileReader.$(OBJEXT) \
	common.$(OBJEXT) Anonymizer.$(OBJEXT) TextFileWriter.$(OBJEXT)
strangers_OBJECTS = $(am_strangers_OBJECTS)
strangers_LDADD = $(LDADD)
strangers_DEPENDENCIES = $(am__DEPENDENCIES_1)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/config/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(lobSTR_SOURCES) $(strangers_SOURCES)
DIST_SOURCES = $(lobSTR_SOURCES) $(strangers_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /data/melissa/scripts/projects/lobstr-code/config/missing --run aclocal-1.11
AMTAR = ${SHELL} /data/melissa/scripts/projects/lobstr-code/config/missing --run tar
AUTOCONF = ${SHELL} /data/melissa/scripts/projects/lobstr-code/config/missing --run autoconf
AUTOHEADER = ${SHELL} /data/melissa/scripts/projects/lobstr-code/config/missing --run autoheader
AUTOMAKE = ${SHELL} /data/melissa/scripts/projects/lobstr-code/config/missing --run automake-1.11
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2 -pthread
CPPFLAGS = 
CPPUNIT_CFLAGS = 
CPPUNIT_CONFIG = /usr/bin/cppunit-config
CPPUNIT_LIBS = -lcppunit -ldl
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2 -pthread 
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EXEEXT = 
FFTW_CFLAGS =  
FFTW_LIBS = -lfftw3 -lm  
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS =  
LTLIBOBJS = 
MAKEINFO = ${SHELL} /data/melissa/scripts/projects/lobstr-code/config/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = STRanger
PACKAGE_BUGREPORT = Melissa Gymrek mgymrek@mit.edu
PACKAGE_NAME = STRanger
PACKAGE_STRING = STRanger 0.0.1
PACKAGE_TARNAME = STRanger
PACKAGE_URL = 
PACKAGE_VERSION = 0.0.1
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
PTHREAD_CC = gcc
PTHREAD_CFLAGS = -pthread
PTHREAD_LIBS = 
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/bash
STRIP = 
VERSION = 0.0.1
abs_builddir = /data/melissa/scripts/projects/lobstr-code/src
abs_srcdir = /data/melissa/scripts/projects/lobstr-code/src
abs_top_builddir = /data/melissa/scripts/projects/lobstr-code
abs_top_srcdir = /data/melissa/scripts/projects/lobstr-code
ac_ct_CC = gcc
ac_ct_CXX = g++
acx_pthread_config = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /data/melissa/scripts/projects/lobstr-code/config/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
lobSTR_CPPFLAGS = -I/usr/include/bamtools  -L/lib
AM_CPPFLAGS = $(FFTW_CFLAGS)
LDADD = $(FFTW_LIBS) -lbamtools
lobSTR_SOURCES = main.cpp runtime_parameters.cpp runtime_parameters.h \
	MSReadRecord.h IFileReader.h FastqFileReader.h \
	FastqFileReader.cpp FastaFileReader.h FastaFileReader.cpp \
	TextFileReader.h TextFileReader.cpp common.h common.cpp \
	TabFileWriter.h TabFileWriter.cpp TextFileWriter.h \
	TextFileWriter.cpp STRDetector.h STRDetector.cpp \
	MainLobeDetection.h MainLobeDetection.cpp \
	TukeyWindowGenerator.h TukeyWindowGenerator.cpp \
	FFT_four_nuc_vectors.h FFT_four_nuc_vectors.cpp \
	MicroSatelliteDetection.h MicroSatelliteDetection.cpp \
	HammingWindowGenerator.h HammingWindowGenerator.cpp \
	CachedWindowGenerator.h CachedWindowGenerator.cpp \
	FFT_nuc_vectors.h FFT_nuc_vectors.cpp GST.h GST.cpp \
	GSTContainer.h GSTContainer.cpp SuffixTree.h SuffixTree.cpp \
	NodeAlignment.h NodeAlignment.cpp MSRecord.h stree.h stree.cpp \
	MSTableFileReader.h MSTableFileReader.cpp GenomeReader.h \
	GenomeReader.cpp ReadAligner.h ReadAligner.cpp \
	SamFileWriter.cpp SamFileWriter.h MultithreadData.h \
	MultithreadData.cpp ISatellite.h Genotyper.h Genotyper.cpp \
	AlignmentFileReader.cpp AlignmentFileReader.h \
	EntropyDetection.h EntropyDetection.cpp
strangers_SOURCES = main_strangers.cpp FastaFileReader.h FastaFileReader.cpp FastqFileReader.h FastqFileReader.cpp IFileReader.h AnonymizerMultiThreadData.h AnonymizerMultiThreadData.cpp runtime_parameters.h runtime_parameters.cpp TextFileReader.h TextFileReader.cpp common.h common.cpp Anonymizer.h Anonymizer.cpp TextFileWriter.h TextFileWriter.cpp
all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	      echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	      $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
lobSTR$(EXEEXT): $(lobSTR_OBJECTS) $(lobSTR_DEPENDENCIES) 
	@rm -f lobSTR$(EXEEXT)
	$(CXXLINK) $(lobSTR_OBJECTS) $(lobSTR_LDADD) $(LIBS)
strangers$(EXEEXT): $(strangers_OBJECTS) $(strangers_DEPENDENCIES) 
	@rm -f strangers$(EXEEXT)
	$(CXXLINK) $(strangers_OBJECTS) $(strangers_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/Anonymizer.Po
include ./$(DEPDIR)/AnonymizerMultiThreadData.Po
include ./$(DEPDIR)/FastaFileReader.Po
include ./$(DEPDIR)/FastqFileReader.Po
include ./$(DEPDIR)/TextFileReader.Po
include ./$(DEPDIR)/TextFileWriter.Po
include ./$(DEPDIR)/common.Po
include ./$(DEPDIR)/lobSTR-AlignmentFileReader.Po
include ./$(DEPDIR)/lobSTR-CachedWindowGenerator.Po
include ./$(DEPDIR)/lobSTR-EntropyDetection.Po
include ./$(DEPDIR)/lobSTR-FFT_four_nuc_vectors.Po
include ./$(DEPDIR)/lobSTR-FFT_nuc_vectors.Po
include ./$(DEPDIR)/lobSTR-FastaFileReader.Po
include ./$(DEPDIR)/lobSTR-FastqFileReader.Po
include ./$(DEPDIR)/lobSTR-GST.Po
include ./$(DEPDIR)/lobSTR-GSTContainer.Po
include ./$(DEPDIR)/lobSTR-GenomeReader.Po
include ./$(DEPDIR)/lobSTR-Genotyper.Po
include ./$(DEPDIR)/lobSTR-HammingWindowGenerator.Po
include ./$(DEPDIR)/lobSTR-MSTableFileReader.Po
include ./$(DEPDIR)/lobSTR-MainLobeDetection.Po
include ./$(DEPDIR)/lobSTR-MicroSatelliteDetection.Po
include ./$(DEPDIR)/lobSTR-MultithreadData.Po
include ./$(DEPDIR)/lobSTR-NodeAlignment.Po
include ./$(DEPDIR)/lobSTR-ReadAligner.Po
include ./$(DEPDIR)/lobSTR-STRDetector.Po
include ./$(DEPDIR)/lobSTR-SamFileWriter.Po
include ./$(DEPDIR)/lobSTR-SuffixTree.Po
include ./$(DEPDIR)/lobSTR-TabFileWriter.Po
include ./$(DEPDIR)/lobSTR-TextFileReader.Po
include ./$(DEPDIR)/lobSTR-TextFileWriter.Po
include ./$(DEPDIR)/lobSTR-TukeyWindowGenerator.Po
include ./$(DEPDIR)/lobSTR-common.Po
include ./$(DEPDIR)/lobSTR-main.Po
include ./$(DEPDIR)/lobSTR-runtime_parameters.Po
include ./$(DEPDIR)/lobSTR-stree.Po
include ./$(DEPDIR)/main_strangers.Po
include ./$(DEPDIR)/runtime_parameters.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

lobSTR-main.o: main.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-main.o -MD -MP -MF $(DEPDIR)/lobSTR-main.Tpo -c -o lobSTR-main.o `test -f 'main.cpp' || echo '$(srcdir)/'`main.cpp
	$(am__mv) $(DEPDIR)/lobSTR-main.Tpo $(DEPDIR)/lobSTR-main.Po
#	source='main.cpp' object='lobSTR-main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-main.o `test -f 'main.cpp' || echo '$(srcdir)/'`main.cpp

lobSTR-main.obj: main.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-main.obj -MD -MP -MF $(DEPDIR)/lobSTR-main.Tpo -c -o lobSTR-main.obj `if test -f 'main.cpp'; then $(CYGPATH_W) 'main.cpp'; else $(CYGPATH_W) '$(srcdir)/main.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-main.Tpo $(DEPDIR)/lobSTR-main.Po
#	source='main.cpp' object='lobSTR-main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-main.obj `if test -f 'main.cpp'; then $(CYGPATH_W) 'main.cpp'; else $(CYGPATH_W) '$(srcdir)/main.cpp'; fi`

lobSTR-runtime_parameters.o: runtime_parameters.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-runtime_parameters.o -MD -MP -MF $(DEPDIR)/lobSTR-runtime_parameters.Tpo -c -o lobSTR-runtime_parameters.o `test -f 'runtime_parameters.cpp' || echo '$(srcdir)/'`runtime_parameters.cpp
	$(am__mv) $(DEPDIR)/lobSTR-runtime_parameters.Tpo $(DEPDIR)/lobSTR-runtime_parameters.Po
#	source='runtime_parameters.cpp' object='lobSTR-runtime_parameters.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-runtime_parameters.o `test -f 'runtime_parameters.cpp' || echo '$(srcdir)/'`runtime_parameters.cpp

lobSTR-runtime_parameters.obj: runtime_parameters.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-runtime_parameters.obj -MD -MP -MF $(DEPDIR)/lobSTR-runtime_parameters.Tpo -c -o lobSTR-runtime_parameters.obj `if test -f 'runtime_parameters.cpp'; then $(CYGPATH_W) 'runtime_parameters.cpp'; else $(CYGPATH_W) '$(srcdir)/runtime_parameters.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-runtime_parameters.Tpo $(DEPDIR)/lobSTR-runtime_parameters.Po
#	source='runtime_parameters.cpp' object='lobSTR-runtime_parameters.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-runtime_parameters.obj `if test -f 'runtime_parameters.cpp'; then $(CYGPATH_W) 'runtime_parameters.cpp'; else $(CYGPATH_W) '$(srcdir)/runtime_parameters.cpp'; fi`

lobSTR-FastqFileReader.o: FastqFileReader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-FastqFileReader.o -MD -MP -MF $(DEPDIR)/lobSTR-FastqFileReader.Tpo -c -o lobSTR-FastqFileReader.o `test -f 'FastqFileReader.cpp' || echo '$(srcdir)/'`FastqFileReader.cpp
	$(am__mv) $(DEPDIR)/lobSTR-FastqFileReader.Tpo $(DEPDIR)/lobSTR-FastqFileReader.Po
#	source='FastqFileReader.cpp' object='lobSTR-FastqFileReader.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-FastqFileReader.o `test -f 'FastqFileReader.cpp' || echo '$(srcdir)/'`FastqFileReader.cpp

lobSTR-FastqFileReader.obj: FastqFileReader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-FastqFileReader.obj -MD -MP -MF $(DEPDIR)/lobSTR-FastqFileReader.Tpo -c -o lobSTR-FastqFileReader.obj `if test -f 'FastqFileReader.cpp'; then $(CYGPATH_W) 'FastqFileReader.cpp'; else $(CYGPATH_W) '$(srcdir)/FastqFileReader.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-FastqFileReader.Tpo $(DEPDIR)/lobSTR-FastqFileReader.Po
#	source='FastqFileReader.cpp' object='lobSTR-FastqFileReader.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-FastqFileReader.obj `if test -f 'FastqFileReader.cpp'; then $(CYGPATH_W) 'FastqFileReader.cpp'; else $(CYGPATH_W) '$(srcdir)/FastqFileReader.cpp'; fi`

lobSTR-FastaFileReader.o: FastaFileReader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-FastaFileReader.o -MD -MP -MF $(DEPDIR)/lobSTR-FastaFileReader.Tpo -c -o lobSTR-FastaFileReader.o `test -f 'FastaFileReader.cpp' || echo '$(srcdir)/'`FastaFileReader.cpp
	$(am__mv) $(DEPDIR)/lobSTR-FastaFileReader.Tpo $(DEPDIR)/lobSTR-FastaFileReader.Po
#	source='FastaFileReader.cpp' object='lobSTR-FastaFileReader.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-FastaFileReader.o `test -f 'FastaFileReader.cpp' || echo '$(srcdir)/'`FastaFileReader.cpp

lobSTR-FastaFileReader.obj: FastaFileReader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-FastaFileReader.obj -MD -MP -MF $(DEPDIR)/lobSTR-FastaFileReader.Tpo -c -o lobSTR-FastaFileReader.obj `if test -f 'FastaFileReader.cpp'; then $(CYGPATH_W) 'FastaFileReader.cpp'; else $(CYGPATH_W) '$(srcdir)/FastaFileReader.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-FastaFileReader.Tpo $(DEPDIR)/lobSTR-FastaFileReader.Po
#	source='FastaFileReader.cpp' object='lobSTR-FastaFileReader.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-FastaFileReader.obj `if test -f 'FastaFileReader.cpp'; then $(CYGPATH_W) 'FastaFileReader.cpp'; else $(CYGPATH_W) '$(srcdir)/FastaFileReader.cpp'; fi`

lobSTR-TextFileReader.o: TextFileReader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-TextFileReader.o -MD -MP -MF $(DEPDIR)/lobSTR-TextFileReader.Tpo -c -o lobSTR-TextFileReader.o `test -f 'TextFileReader.cpp' || echo '$(srcdir)/'`TextFileReader.cpp
	$(am__mv) $(DEPDIR)/lobSTR-TextFileReader.Tpo $(DEPDIR)/lobSTR-TextFileReader.Po
#	source='TextFileReader.cpp' object='lobSTR-TextFileReader.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-TextFileReader.o `test -f 'TextFileReader.cpp' || echo '$(srcdir)/'`TextFileReader.cpp

lobSTR-TextFileReader.obj: TextFileReader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-TextFileReader.obj -MD -MP -MF $(DEPDIR)/lobSTR-TextFileReader.Tpo -c -o lobSTR-TextFileReader.obj `if test -f 'TextFileReader.cpp'; then $(CYGPATH_W) 'TextFileReader.cpp'; else $(CYGPATH_W) '$(srcdir)/TextFileReader.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-TextFileReader.Tpo $(DEPDIR)/lobSTR-TextFileReader.Po
#	source='TextFileReader.cpp' object='lobSTR-TextFileReader.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-TextFileReader.obj `if test -f 'TextFileReader.cpp'; then $(CYGPATH_W) 'TextFileReader.cpp'; else $(CYGPATH_W) '$(srcdir)/TextFileReader.cpp'; fi`

lobSTR-common.o: common.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-common.o -MD -MP -MF $(DEPDIR)/lobSTR-common.Tpo -c -o lobSTR-common.o `test -f 'common.cpp' || echo '$(srcdir)/'`common.cpp
	$(am__mv) $(DEPDIR)/lobSTR-common.Tpo $(DEPDIR)/lobSTR-common.Po
#	source='common.cpp' object='lobSTR-common.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-common.o `test -f 'common.cpp' || echo '$(srcdir)/'`common.cpp

lobSTR-common.obj: common.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-common.obj -MD -MP -MF $(DEPDIR)/lobSTR-common.Tpo -c -o lobSTR-common.obj `if test -f 'common.cpp'; then $(CYGPATH_W) 'common.cpp'; else $(CYGPATH_W) '$(srcdir)/common.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-common.Tpo $(DEPDIR)/lobSTR-common.Po
#	source='common.cpp' object='lobSTR-common.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-common.obj `if test -f 'common.cpp'; then $(CYGPATH_W) 'common.cpp'; else $(CYGPATH_W) '$(srcdir)/common.cpp'; fi`

lobSTR-TabFileWriter.o: TabFileWriter.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-TabFileWriter.o -MD -MP -MF $(DEPDIR)/lobSTR-TabFileWriter.Tpo -c -o lobSTR-TabFileWriter.o `test -f 'TabFileWriter.cpp' || echo '$(srcdir)/'`TabFileWriter.cpp
	$(am__mv) $(DEPDIR)/lobSTR-TabFileWriter.Tpo $(DEPDIR)/lobSTR-TabFileWriter.Po
#	source='TabFileWriter.cpp' object='lobSTR-TabFileWriter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-TabFileWriter.o `test -f 'TabFileWriter.cpp' || echo '$(srcdir)/'`TabFileWriter.cpp

lobSTR-TabFileWriter.obj: TabFileWriter.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-TabFileWriter.obj -MD -MP -MF $(DEPDIR)/lobSTR-TabFileWriter.Tpo -c -o lobSTR-TabFileWriter.obj `if test -f 'TabFileWriter.cpp'; then $(CYGPATH_W) 'TabFileWriter.cpp'; else $(CYGPATH_W) '$(srcdir)/TabFileWriter.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-TabFileWriter.Tpo $(DEPDIR)/lobSTR-TabFileWriter.Po
#	source='TabFileWriter.cpp' object='lobSTR-TabFileWriter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-TabFileWriter.obj `if test -f 'TabFileWriter.cpp'; then $(CYGPATH_W) 'TabFileWriter.cpp'; else $(CYGPATH_W) '$(srcdir)/TabFileWriter.cpp'; fi`

lobSTR-TextFileWriter.o: TextFileWriter.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-TextFileWriter.o -MD -MP -MF $(DEPDIR)/lobSTR-TextFileWriter.Tpo -c -o lobSTR-TextFileWriter.o `test -f 'TextFileWriter.cpp' || echo '$(srcdir)/'`TextFileWriter.cpp
	$(am__mv) $(DEPDIR)/lobSTR-TextFileWriter.Tpo $(DEPDIR)/lobSTR-TextFileWriter.Po
#	source='TextFileWriter.cpp' object='lobSTR-TextFileWriter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-TextFileWriter.o `test -f 'TextFileWriter.cpp' || echo '$(srcdir)/'`TextFileWriter.cpp

lobSTR-TextFileWriter.obj: TextFileWriter.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-TextFileWriter.obj -MD -MP -MF $(DEPDIR)/lobSTR-TextFileWriter.Tpo -c -o lobSTR-TextFileWriter.obj `if test -f 'TextFileWriter.cpp'; then $(CYGPATH_W) 'TextFileWriter.cpp'; else $(CYGPATH_W) '$(srcdir)/TextFileWriter.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-TextFileWriter.Tpo $(DEPDIR)/lobSTR-TextFileWriter.Po
#	source='TextFileWriter.cpp' object='lobSTR-TextFileWriter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-TextFileWriter.obj `if test -f 'TextFileWriter.cpp'; then $(CYGPATH_W) 'TextFileWriter.cpp'; else $(CYGPATH_W) '$(srcdir)/TextFileWriter.cpp'; fi`

lobSTR-STRDetector.o: STRDetector.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-STRDetector.o -MD -MP -MF $(DEPDIR)/lobSTR-STRDetector.Tpo -c -o lobSTR-STRDetector.o `test -f 'STRDetector.cpp' || echo '$(srcdir)/'`STRDetector.cpp
	$(am__mv) $(DEPDIR)/lobSTR-STRDetector.Tpo $(DEPDIR)/lobSTR-STRDetector.Po
#	source='STRDetector.cpp' object='lobSTR-STRDetector.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-STRDetector.o `test -f 'STRDetector.cpp' || echo '$(srcdir)/'`STRDetector.cpp

lobSTR-STRDetector.obj: STRDetector.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-STRDetector.obj -MD -MP -MF $(DEPDIR)/lobSTR-STRDetector.Tpo -c -o lobSTR-STRDetector.obj `if test -f 'STRDetector.cpp'; then $(CYGPATH_W) 'STRDetector.cpp'; else $(CYGPATH_W) '$(srcdir)/STRDetector.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-STRDetector.Tpo $(DEPDIR)/lobSTR-STRDetector.Po
#	source='STRDetector.cpp' object='lobSTR-STRDetector.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-STRDetector.obj `if test -f 'STRDetector.cpp'; then $(CYGPATH_W) 'STRDetector.cpp'; else $(CYGPATH_W) '$(srcdir)/STRDetector.cpp'; fi`

lobSTR-MainLobeDetection.o: MainLobeDetection.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-MainLobeDetection.o -MD -MP -MF $(DEPDIR)/lobSTR-MainLobeDetection.Tpo -c -o lobSTR-MainLobeDetection.o `test -f 'MainLobeDetection.cpp' || echo '$(srcdir)/'`MainLobeDetection.cpp
	$(am__mv) $(DEPDIR)/lobSTR-MainLobeDetection.Tpo $(DEPDIR)/lobSTR-MainLobeDetection.Po
#	source='MainLobeDetection.cpp' object='lobSTR-MainLobeDetection.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-MainLobeDetection.o `test -f 'MainLobeDetection.cpp' || echo '$(srcdir)/'`MainLobeDetection.cpp

lobSTR-MainLobeDetection.obj: MainLobeDetection.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-MainLobeDetection.obj -MD -MP -MF $(DEPDIR)/lobSTR-MainLobeDetection.Tpo -c -o lobSTR-MainLobeDetection.obj `if test -f 'MainLobeDetection.cpp'; then $(CYGPATH_W) 'MainLobeDetection.cpp'; else $(CYGPATH_W) '$(srcdir)/MainLobeDetection.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-MainLobeDetection.Tpo $(DEPDIR)/lobSTR-MainLobeDetection.Po
#	source='MainLobeDetection.cpp' object='lobSTR-MainLobeDetection.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-MainLobeDetection.obj `if test -f 'MainLobeDetection.cpp'; then $(CYGPATH_W) 'MainLobeDetection.cpp'; else $(CYGPATH_W) '$(srcdir)/MainLobeDetection.cpp'; fi`

lobSTR-TukeyWindowGenerator.o: TukeyWindowGenerator.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-TukeyWindowGenerator.o -MD -MP -MF $(DEPDIR)/lobSTR-TukeyWindowGenerator.Tpo -c -o lobSTR-TukeyWindowGenerator.o `test -f 'TukeyWindowGenerator.cpp' || echo '$(srcdir)/'`TukeyWindowGenerator.cpp
	$(am__mv) $(DEPDIR)/lobSTR-TukeyWindowGenerator.Tpo $(DEPDIR)/lobSTR-TukeyWindowGenerator.Po
#	source='TukeyWindowGenerator.cpp' object='lobSTR-TukeyWindowGenerator.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-TukeyWindowGenerator.o `test -f 'TukeyWindowGenerator.cpp' || echo '$(srcdir)/'`TukeyWindowGenerator.cpp

lobSTR-TukeyWindowGenerator.obj: TukeyWindowGenerator.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-TukeyWindowGenerator.obj -MD -MP -MF $(DEPDIR)/lobSTR-TukeyWindowGenerator.Tpo -c -o lobSTR-TukeyWindowGenerator.obj `if test -f 'TukeyWindowGenerator.cpp'; then $(CYGPATH_W) 'TukeyWindowGenerator.cpp'; else $(CYGPATH_W) '$(srcdir)/TukeyWindowGenerator.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-TukeyWindowGenerator.Tpo $(DEPDIR)/lobSTR-TukeyWindowGenerator.Po
#	source='TukeyWindowGenerator.cpp' object='lobSTR-TukeyWindowGenerator.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-TukeyWindowGenerator.obj `if test -f 'TukeyWindowGenerator.cpp'; then $(CYGPATH_W) 'TukeyWindowGenerator.cpp'; else $(CYGPATH_W) '$(srcdir)/TukeyWindowGenerator.cpp'; fi`

lobSTR-FFT_four_nuc_vectors.o: FFT_four_nuc_vectors.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-FFT_four_nuc_vectors.o -MD -MP -MF $(DEPDIR)/lobSTR-FFT_four_nuc_vectors.Tpo -c -o lobSTR-FFT_four_nuc_vectors.o `test -f 'FFT_four_nuc_vectors.cpp' || echo '$(srcdir)/'`FFT_four_nuc_vectors.cpp
	$(am__mv) $(DEPDIR)/lobSTR-FFT_four_nuc_vectors.Tpo $(DEPDIR)/lobSTR-FFT_four_nuc_vectors.Po
#	source='FFT_four_nuc_vectors.cpp' object='lobSTR-FFT_four_nuc_vectors.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-FFT_four_nuc_vectors.o `test -f 'FFT_four_nuc_vectors.cpp' || echo '$(srcdir)/'`FFT_four_nuc_vectors.cpp

lobSTR-FFT_four_nuc_vectors.obj: FFT_four_nuc_vectors.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-FFT_four_nuc_vectors.obj -MD -MP -MF $(DEPDIR)/lobSTR-FFT_four_nuc_vectors.Tpo -c -o lobSTR-FFT_four_nuc_vectors.obj `if test -f 'FFT_four_nuc_vectors.cpp'; then $(CYGPATH_W) 'FFT_four_nuc_vectors.cpp'; else $(CYGPATH_W) '$(srcdir)/FFT_four_nuc_vectors.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-FFT_four_nuc_vectors.Tpo $(DEPDIR)/lobSTR-FFT_four_nuc_vectors.Po
#	source='FFT_four_nuc_vectors.cpp' object='lobSTR-FFT_four_nuc_vectors.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-FFT_four_nuc_vectors.obj `if test -f 'FFT_four_nuc_vectors.cpp'; then $(CYGPATH_W) 'FFT_four_nuc_vectors.cpp'; else $(CYGPATH_W) '$(srcdir)/FFT_four_nuc_vectors.cpp'; fi`

lobSTR-MicroSatelliteDetection.o: MicroSatelliteDetection.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-MicroSatelliteDetection.o -MD -MP -MF $(DEPDIR)/lobSTR-MicroSatelliteDetection.Tpo -c -o lobSTR-MicroSatelliteDetection.o `test -f 'MicroSatelliteDetection.cpp' || echo '$(srcdir)/'`MicroSatelliteDetection.cpp
	$(am__mv) $(DEPDIR)/lobSTR-MicroSatelliteDetection.Tpo $(DEPDIR)/lobSTR-MicroSatelliteDetection.Po
#	source='MicroSatelliteDetection.cpp' object='lobSTR-MicroSatelliteDetection.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-MicroSatelliteDetection.o `test -f 'MicroSatelliteDetection.cpp' || echo '$(srcdir)/'`MicroSatelliteDetection.cpp

lobSTR-MicroSatelliteDetection.obj: MicroSatelliteDetection.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-MicroSatelliteDetection.obj -MD -MP -MF $(DEPDIR)/lobSTR-MicroSatelliteDetection.Tpo -c -o lobSTR-MicroSatelliteDetection.obj `if test -f 'MicroSatelliteDetection.cpp'; then $(CYGPATH_W) 'MicroSatelliteDetection.cpp'; else $(CYGPATH_W) '$(srcdir)/MicroSatelliteDetection.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-MicroSatelliteDetection.Tpo $(DEPDIR)/lobSTR-MicroSatelliteDetection.Po
#	source='MicroSatelliteDetection.cpp' object='lobSTR-MicroSatelliteDetection.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-MicroSatelliteDetection.obj `if test -f 'MicroSatelliteDetection.cpp'; then $(CYGPATH_W) 'MicroSatelliteDetection.cpp'; else $(CYGPATH_W) '$(srcdir)/MicroSatelliteDetection.cpp'; fi`

lobSTR-HammingWindowGenerator.o: HammingWindowGenerator.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-HammingWindowGenerator.o -MD -MP -MF $(DEPDIR)/lobSTR-HammingWindowGenerator.Tpo -c -o lobSTR-HammingWindowGenerator.o `test -f 'HammingWindowGenerator.cpp' || echo '$(srcdir)/'`HammingWindowGenerator.cpp
	$(am__mv) $(DEPDIR)/lobSTR-HammingWindowGenerator.Tpo $(DEPDIR)/lobSTR-HammingWindowGenerator.Po
#	source='HammingWindowGenerator.cpp' object='lobSTR-HammingWindowGenerator.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-HammingWindowGenerator.o `test -f 'HammingWindowGenerator.cpp' || echo '$(srcdir)/'`HammingWindowGenerator.cpp

lobSTR-HammingWindowGenerator.obj: HammingWindowGenerator.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-HammingWindowGenerator.obj -MD -MP -MF $(DEPDIR)/lobSTR-HammingWindowGenerator.Tpo -c -o lobSTR-HammingWindowGenerator.obj `if test -f 'HammingWindowGenerator.cpp'; then $(CYGPATH_W) 'HammingWindowGenerator.cpp'; else $(CYGPATH_W) '$(srcdir)/HammingWindowGenerator.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-HammingWindowGenerator.Tpo $(DEPDIR)/lobSTR-HammingWindowGenerator.Po
#	source='HammingWindowGenerator.cpp' object='lobSTR-HammingWindowGenerator.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-HammingWindowGenerator.obj `if test -f 'HammingWindowGenerator.cpp'; then $(CYGPATH_W) 'HammingWindowGenerator.cpp'; else $(CYGPATH_W) '$(srcdir)/HammingWindowGenerator.cpp'; fi`

lobSTR-CachedWindowGenerator.o: CachedWindowGenerator.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-CachedWindowGenerator.o -MD -MP -MF $(DEPDIR)/lobSTR-CachedWindowGenerator.Tpo -c -o lobSTR-CachedWindowGenerator.o `test -f 'CachedWindowGenerator.cpp' || echo '$(srcdir)/'`CachedWindowGenerator.cpp
	$(am__mv) $(DEPDIR)/lobSTR-CachedWindowGenerator.Tpo $(DEPDIR)/lobSTR-CachedWindowGenerator.Po
#	source='CachedWindowGenerator.cpp' object='lobSTR-CachedWindowGenerator.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-CachedWindowGenerator.o `test -f 'CachedWindowGenerator.cpp' || echo '$(srcdir)/'`CachedWindowGenerator.cpp

lobSTR-CachedWindowGenerator.obj: CachedWindowGenerator.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-CachedWindowGenerator.obj -MD -MP -MF $(DEPDIR)/lobSTR-CachedWindowGenerator.Tpo -c -o lobSTR-CachedWindowGenerator.obj `if test -f 'CachedWindowGenerator.cpp'; then $(CYGPATH_W) 'CachedWindowGenerator.cpp'; else $(CYGPATH_W) '$(srcdir)/CachedWindowGenerator.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-CachedWindowGenerator.Tpo $(DEPDIR)/lobSTR-CachedWindowGenerator.Po
#	source='CachedWindowGenerator.cpp' object='lobSTR-CachedWindowGenerator.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-CachedWindowGenerator.obj `if test -f 'CachedWindowGenerator.cpp'; then $(CYGPATH_W) 'CachedWindowGenerator.cpp'; else $(CYGPATH_W) '$(srcdir)/CachedWindowGenerator.cpp'; fi`

lobSTR-FFT_nuc_vectors.o: FFT_nuc_vectors.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-FFT_nuc_vectors.o -MD -MP -MF $(DEPDIR)/lobSTR-FFT_nuc_vectors.Tpo -c -o lobSTR-FFT_nuc_vectors.o `test -f 'FFT_nuc_vectors.cpp' || echo '$(srcdir)/'`FFT_nuc_vectors.cpp
	$(am__mv) $(DEPDIR)/lobSTR-FFT_nuc_vectors.Tpo $(DEPDIR)/lobSTR-FFT_nuc_vectors.Po
#	source='FFT_nuc_vectors.cpp' object='lobSTR-FFT_nuc_vectors.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-FFT_nuc_vectors.o `test -f 'FFT_nuc_vectors.cpp' || echo '$(srcdir)/'`FFT_nuc_vectors.cpp

lobSTR-FFT_nuc_vectors.obj: FFT_nuc_vectors.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-FFT_nuc_vectors.obj -MD -MP -MF $(DEPDIR)/lobSTR-FFT_nuc_vectors.Tpo -c -o lobSTR-FFT_nuc_vectors.obj `if test -f 'FFT_nuc_vectors.cpp'; then $(CYGPATH_W) 'FFT_nuc_vectors.cpp'; else $(CYGPATH_W) '$(srcdir)/FFT_nuc_vectors.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-FFT_nuc_vectors.Tpo $(DEPDIR)/lobSTR-FFT_nuc_vectors.Po
#	source='FFT_nuc_vectors.cpp' object='lobSTR-FFT_nuc_vectors.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-FFT_nuc_vectors.obj `if test -f 'FFT_nuc_vectors.cpp'; then $(CYGPATH_W) 'FFT_nuc_vectors.cpp'; else $(CYGPATH_W) '$(srcdir)/FFT_nuc_vectors.cpp'; fi`

lobSTR-GST.o: GST.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-GST.o -MD -MP -MF $(DEPDIR)/lobSTR-GST.Tpo -c -o lobSTR-GST.o `test -f 'GST.cpp' || echo '$(srcdir)/'`GST.cpp
	$(am__mv) $(DEPDIR)/lobSTR-GST.Tpo $(DEPDIR)/lobSTR-GST.Po
#	source='GST.cpp' object='lobSTR-GST.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-GST.o `test -f 'GST.cpp' || echo '$(srcdir)/'`GST.cpp

lobSTR-GST.obj: GST.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-GST.obj -MD -MP -MF $(DEPDIR)/lobSTR-GST.Tpo -c -o lobSTR-GST.obj `if test -f 'GST.cpp'; then $(CYGPATH_W) 'GST.cpp'; else $(CYGPATH_W) '$(srcdir)/GST.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-GST.Tpo $(DEPDIR)/lobSTR-GST.Po
#	source='GST.cpp' object='lobSTR-GST.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-GST.obj `if test -f 'GST.cpp'; then $(CYGPATH_W) 'GST.cpp'; else $(CYGPATH_W) '$(srcdir)/GST.cpp'; fi`

lobSTR-GSTContainer.o: GSTContainer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-GSTContainer.o -MD -MP -MF $(DEPDIR)/lobSTR-GSTContainer.Tpo -c -o lobSTR-GSTContainer.o `test -f 'GSTContainer.cpp' || echo '$(srcdir)/'`GSTContainer.cpp
	$(am__mv) $(DEPDIR)/lobSTR-GSTContainer.Tpo $(DEPDIR)/lobSTR-GSTContainer.Po
#	source='GSTContainer.cpp' object='lobSTR-GSTContainer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-GSTContainer.o `test -f 'GSTContainer.cpp' || echo '$(srcdir)/'`GSTContainer.cpp

lobSTR-GSTContainer.obj: GSTContainer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-GSTContainer.obj -MD -MP -MF $(DEPDIR)/lobSTR-GSTContainer.Tpo -c -o lobSTR-GSTContainer.obj `if test -f 'GSTContainer.cpp'; then $(CYGPATH_W) 'GSTContainer.cpp'; else $(CYGPATH_W) '$(srcdir)/GSTContainer.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-GSTContainer.Tpo $(DEPDIR)/lobSTR-GSTContainer.Po
#	source='GSTContainer.cpp' object='lobSTR-GSTContainer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-GSTContainer.obj `if test -f 'GSTContainer.cpp'; then $(CYGPATH_W) 'GSTContainer.cpp'; else $(CYGPATH_W) '$(srcdir)/GSTContainer.cpp'; fi`

lobSTR-SuffixTree.o: SuffixTree.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-SuffixTree.o -MD -MP -MF $(DEPDIR)/lobSTR-SuffixTree.Tpo -c -o lobSTR-SuffixTree.o `test -f 'SuffixTree.cpp' || echo '$(srcdir)/'`SuffixTree.cpp
	$(am__mv) $(DEPDIR)/lobSTR-SuffixTree.Tpo $(DEPDIR)/lobSTR-SuffixTree.Po
#	source='SuffixTree.cpp' object='lobSTR-SuffixTree.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-SuffixTree.o `test -f 'SuffixTree.cpp' || echo '$(srcdir)/'`SuffixTree.cpp

lobSTR-SuffixTree.obj: SuffixTree.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-SuffixTree.obj -MD -MP -MF $(DEPDIR)/lobSTR-SuffixTree.Tpo -c -o lobSTR-SuffixTree.obj `if test -f 'SuffixTree.cpp'; then $(CYGPATH_W) 'SuffixTree.cpp'; else $(CYGPATH_W) '$(srcdir)/SuffixTree.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-SuffixTree.Tpo $(DEPDIR)/lobSTR-SuffixTree.Po
#	source='SuffixTree.cpp' object='lobSTR-SuffixTree.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-SuffixTree.obj `if test -f 'SuffixTree.cpp'; then $(CYGPATH_W) 'SuffixTree.cpp'; else $(CYGPATH_W) '$(srcdir)/SuffixTree.cpp'; fi`

lobSTR-NodeAlignment.o: NodeAlignment.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-NodeAlignment.o -MD -MP -MF $(DEPDIR)/lobSTR-NodeAlignment.Tpo -c -o lobSTR-NodeAlignment.o `test -f 'NodeAlignment.cpp' || echo '$(srcdir)/'`NodeAlignment.cpp
	$(am__mv) $(DEPDIR)/lobSTR-NodeAlignment.Tpo $(DEPDIR)/lobSTR-NodeAlignment.Po
#	source='NodeAlignment.cpp' object='lobSTR-NodeAlignment.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-NodeAlignment.o `test -f 'NodeAlignment.cpp' || echo '$(srcdir)/'`NodeAlignment.cpp

lobSTR-NodeAlignment.obj: NodeAlignment.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-NodeAlignment.obj -MD -MP -MF $(DEPDIR)/lobSTR-NodeAlignment.Tpo -c -o lobSTR-NodeAlignment.obj `if test -f 'NodeAlignment.cpp'; then $(CYGPATH_W) 'NodeAlignment.cpp'; else $(CYGPATH_W) '$(srcdir)/NodeAlignment.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-NodeAlignment.Tpo $(DEPDIR)/lobSTR-NodeAlignment.Po
#	source='NodeAlignment.cpp' object='lobSTR-NodeAlignment.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-NodeAlignment.obj `if test -f 'NodeAlignment.cpp'; then $(CYGPATH_W) 'NodeAlignment.cpp'; else $(CYGPATH_W) '$(srcdir)/NodeAlignment.cpp'; fi`

lobSTR-stree.o: stree.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-stree.o -MD -MP -MF $(DEPDIR)/lobSTR-stree.Tpo -c -o lobSTR-stree.o `test -f 'stree.cpp' || echo '$(srcdir)/'`stree.cpp
	$(am__mv) $(DEPDIR)/lobSTR-stree.Tpo $(DEPDIR)/lobSTR-stree.Po
#	source='stree.cpp' object='lobSTR-stree.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-stree.o `test -f 'stree.cpp' || echo '$(srcdir)/'`stree.cpp

lobSTR-stree.obj: stree.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-stree.obj -MD -MP -MF $(DEPDIR)/lobSTR-stree.Tpo -c -o lobSTR-stree.obj `if test -f 'stree.cpp'; then $(CYGPATH_W) 'stree.cpp'; else $(CYGPATH_W) '$(srcdir)/stree.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-stree.Tpo $(DEPDIR)/lobSTR-stree.Po
#	source='stree.cpp' object='lobSTR-stree.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-stree.obj `if test -f 'stree.cpp'; then $(CYGPATH_W) 'stree.cpp'; else $(CYGPATH_W) '$(srcdir)/stree.cpp'; fi`

lobSTR-MSTableFileReader.o: MSTableFileReader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-MSTableFileReader.o -MD -MP -MF $(DEPDIR)/lobSTR-MSTableFileReader.Tpo -c -o lobSTR-MSTableFileReader.o `test -f 'MSTableFileReader.cpp' || echo '$(srcdir)/'`MSTableFileReader.cpp
	$(am__mv) $(DEPDIR)/lobSTR-MSTableFileReader.Tpo $(DEPDIR)/lobSTR-MSTableFileReader.Po
#	source='MSTableFileReader.cpp' object='lobSTR-MSTableFileReader.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-MSTableFileReader.o `test -f 'MSTableFileReader.cpp' || echo '$(srcdir)/'`MSTableFileReader.cpp

lobSTR-MSTableFileReader.obj: MSTableFileReader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-MSTableFileReader.obj -MD -MP -MF $(DEPDIR)/lobSTR-MSTableFileReader.Tpo -c -o lobSTR-MSTableFileReader.obj `if test -f 'MSTableFileReader.cpp'; then $(CYGPATH_W) 'MSTableFileReader.cpp'; else $(CYGPATH_W) '$(srcdir)/MSTableFileReader.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-MSTableFileReader.Tpo $(DEPDIR)/lobSTR-MSTableFileReader.Po
#	source='MSTableFileReader.cpp' object='lobSTR-MSTableFileReader.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-MSTableFileReader.obj `if test -f 'MSTableFileReader.cpp'; then $(CYGPATH_W) 'MSTableFileReader.cpp'; else $(CYGPATH_W) '$(srcdir)/MSTableFileReader.cpp'; fi`

lobSTR-GenomeReader.o: GenomeReader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-GenomeReader.o -MD -MP -MF $(DEPDIR)/lobSTR-GenomeReader.Tpo -c -o lobSTR-GenomeReader.o `test -f 'GenomeReader.cpp' || echo '$(srcdir)/'`GenomeReader.cpp
	$(am__mv) $(DEPDIR)/lobSTR-GenomeReader.Tpo $(DEPDIR)/lobSTR-GenomeReader.Po
#	source='GenomeReader.cpp' object='lobSTR-GenomeReader.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-GenomeReader.o `test -f 'GenomeReader.cpp' || echo '$(srcdir)/'`GenomeReader.cpp

lobSTR-GenomeReader.obj: GenomeReader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-GenomeReader.obj -MD -MP -MF $(DEPDIR)/lobSTR-GenomeReader.Tpo -c -o lobSTR-GenomeReader.obj `if test -f 'GenomeReader.cpp'; then $(CYGPATH_W) 'GenomeReader.cpp'; else $(CYGPATH_W) '$(srcdir)/GenomeReader.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-GenomeReader.Tpo $(DEPDIR)/lobSTR-GenomeReader.Po
#	source='GenomeReader.cpp' object='lobSTR-GenomeReader.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-GenomeReader.obj `if test -f 'GenomeReader.cpp'; then $(CYGPATH_W) 'GenomeReader.cpp'; else $(CYGPATH_W) '$(srcdir)/GenomeReader.cpp'; fi`

lobSTR-ReadAligner.o: ReadAligner.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-ReadAligner.o -MD -MP -MF $(DEPDIR)/lobSTR-ReadAligner.Tpo -c -o lobSTR-ReadAligner.o `test -f 'ReadAligner.cpp' || echo '$(srcdir)/'`ReadAligner.cpp
	$(am__mv) $(DEPDIR)/lobSTR-ReadAligner.Tpo $(DEPDIR)/lobSTR-ReadAligner.Po
#	source='ReadAligner.cpp' object='lobSTR-ReadAligner.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-ReadAligner.o `test -f 'ReadAligner.cpp' || echo '$(srcdir)/'`ReadAligner.cpp

lobSTR-ReadAligner.obj: ReadAligner.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-ReadAligner.obj -MD -MP -MF $(DEPDIR)/lobSTR-ReadAligner.Tpo -c -o lobSTR-ReadAligner.obj `if test -f 'ReadAligner.cpp'; then $(CYGPATH_W) 'ReadAligner.cpp'; else $(CYGPATH_W) '$(srcdir)/ReadAligner.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-ReadAligner.Tpo $(DEPDIR)/lobSTR-ReadAligner.Po
#	source='ReadAligner.cpp' object='lobSTR-ReadAligner.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-ReadAligner.obj `if test -f 'ReadAligner.cpp'; then $(CYGPATH_W) 'ReadAligner.cpp'; else $(CYGPATH_W) '$(srcdir)/ReadAligner.cpp'; fi`

lobSTR-SamFileWriter.o: SamFileWriter.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-SamFileWriter.o -MD -MP -MF $(DEPDIR)/lobSTR-SamFileWriter.Tpo -c -o lobSTR-SamFileWriter.o `test -f 'SamFileWriter.cpp' || echo '$(srcdir)/'`SamFileWriter.cpp
	$(am__mv) $(DEPDIR)/lobSTR-SamFileWriter.Tpo $(DEPDIR)/lobSTR-SamFileWriter.Po
#	source='SamFileWriter.cpp' object='lobSTR-SamFileWriter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-SamFileWriter.o `test -f 'SamFileWriter.cpp' || echo '$(srcdir)/'`SamFileWriter.cpp

lobSTR-SamFileWriter.obj: SamFileWriter.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-SamFileWriter.obj -MD -MP -MF $(DEPDIR)/lobSTR-SamFileWriter.Tpo -c -o lobSTR-SamFileWriter.obj `if test -f 'SamFileWriter.cpp'; then $(CYGPATH_W) 'SamFileWriter.cpp'; else $(CYGPATH_W) '$(srcdir)/SamFileWriter.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-SamFileWriter.Tpo $(DEPDIR)/lobSTR-SamFileWriter.Po
#	source='SamFileWriter.cpp' object='lobSTR-SamFileWriter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-SamFileWriter.obj `if test -f 'SamFileWriter.cpp'; then $(CYGPATH_W) 'SamFileWriter.cpp'; else $(CYGPATH_W) '$(srcdir)/SamFileWriter.cpp'; fi`

lobSTR-MultithreadData.o: MultithreadData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-MultithreadData.o -MD -MP -MF $(DEPDIR)/lobSTR-MultithreadData.Tpo -c -o lobSTR-MultithreadData.o `test -f 'MultithreadData.cpp' || echo '$(srcdir)/'`MultithreadData.cpp
	$(am__mv) $(DEPDIR)/lobSTR-MultithreadData.Tpo $(DEPDIR)/lobSTR-MultithreadData.Po
#	source='MultithreadData.cpp' object='lobSTR-MultithreadData.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-MultithreadData.o `test -f 'MultithreadData.cpp' || echo '$(srcdir)/'`MultithreadData.cpp

lobSTR-MultithreadData.obj: MultithreadData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-MultithreadData.obj -MD -MP -MF $(DEPDIR)/lobSTR-MultithreadData.Tpo -c -o lobSTR-MultithreadData.obj `if test -f 'MultithreadData.cpp'; then $(CYGPATH_W) 'MultithreadData.cpp'; else $(CYGPATH_W) '$(srcdir)/MultithreadData.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-MultithreadData.Tpo $(DEPDIR)/lobSTR-MultithreadData.Po
#	source='MultithreadData.cpp' object='lobSTR-MultithreadData.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-MultithreadData.obj `if test -f 'MultithreadData.cpp'; then $(CYGPATH_W) 'MultithreadData.cpp'; else $(CYGPATH_W) '$(srcdir)/MultithreadData.cpp'; fi`

lobSTR-Genotyper.o: Genotyper.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-Genotyper.o -MD -MP -MF $(DEPDIR)/lobSTR-Genotyper.Tpo -c -o lobSTR-Genotyper.o `test -f 'Genotyper.cpp' || echo '$(srcdir)/'`Genotyper.cpp
	$(am__mv) $(DEPDIR)/lobSTR-Genotyper.Tpo $(DEPDIR)/lobSTR-Genotyper.Po
#	source='Genotyper.cpp' object='lobSTR-Genotyper.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-Genotyper.o `test -f 'Genotyper.cpp' || echo '$(srcdir)/'`Genotyper.cpp

lobSTR-Genotyper.obj: Genotyper.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-Genotyper.obj -MD -MP -MF $(DEPDIR)/lobSTR-Genotyper.Tpo -c -o lobSTR-Genotyper.obj `if test -f 'Genotyper.cpp'; then $(CYGPATH_W) 'Genotyper.cpp'; else $(CYGPATH_W) '$(srcdir)/Genotyper.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-Genotyper.Tpo $(DEPDIR)/lobSTR-Genotyper.Po
#	source='Genotyper.cpp' object='lobSTR-Genotyper.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-Genotyper.obj `if test -f 'Genotyper.cpp'; then $(CYGPATH_W) 'Genotyper.cpp'; else $(CYGPATH_W) '$(srcdir)/Genotyper.cpp'; fi`

lobSTR-AlignmentFileReader.o: AlignmentFileReader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-AlignmentFileReader.o -MD -MP -MF $(DEPDIR)/lobSTR-AlignmentFileReader.Tpo -c -o lobSTR-AlignmentFileReader.o `test -f 'AlignmentFileReader.cpp' || echo '$(srcdir)/'`AlignmentFileReader.cpp
	$(am__mv) $(DEPDIR)/lobSTR-AlignmentFileReader.Tpo $(DEPDIR)/lobSTR-AlignmentFileReader.Po
#	source='AlignmentFileReader.cpp' object='lobSTR-AlignmentFileReader.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-AlignmentFileReader.o `test -f 'AlignmentFileReader.cpp' || echo '$(srcdir)/'`AlignmentFileReader.cpp

lobSTR-AlignmentFileReader.obj: AlignmentFileReader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-AlignmentFileReader.obj -MD -MP -MF $(DEPDIR)/lobSTR-AlignmentFileReader.Tpo -c -o lobSTR-AlignmentFileReader.obj `if test -f 'AlignmentFileReader.cpp'; then $(CYGPATH_W) 'AlignmentFileReader.cpp'; else $(CYGPATH_W) '$(srcdir)/AlignmentFileReader.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-AlignmentFileReader.Tpo $(DEPDIR)/lobSTR-AlignmentFileReader.Po
#	source='AlignmentFileReader.cpp' object='lobSTR-AlignmentFileReader.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-AlignmentFileReader.obj `if test -f 'AlignmentFileReader.cpp'; then $(CYGPATH_W) 'AlignmentFileReader.cpp'; else $(CYGPATH_W) '$(srcdir)/AlignmentFileReader.cpp'; fi`

lobSTR-EntropyDetection.o: EntropyDetection.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-EntropyDetection.o -MD -MP -MF $(DEPDIR)/lobSTR-EntropyDetection.Tpo -c -o lobSTR-EntropyDetection.o `test -f 'EntropyDetection.cpp' || echo '$(srcdir)/'`EntropyDetection.cpp
	$(am__mv) $(DEPDIR)/lobSTR-EntropyDetection.Tpo $(DEPDIR)/lobSTR-EntropyDetection.Po
#	source='EntropyDetection.cpp' object='lobSTR-EntropyDetection.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-EntropyDetection.o `test -f 'EntropyDetection.cpp' || echo '$(srcdir)/'`EntropyDetection.cpp

lobSTR-EntropyDetection.obj: EntropyDetection.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lobSTR-EntropyDetection.obj -MD -MP -MF $(DEPDIR)/lobSTR-EntropyDetection.Tpo -c -o lobSTR-EntropyDetection.obj `if test -f 'EntropyDetection.cpp'; then $(CYGPATH_W) 'EntropyDetection.cpp'; else $(CYGPATH_W) '$(srcdir)/EntropyDetection.cpp'; fi`
	$(am__mv) $(DEPDIR)/lobSTR-EntropyDetection.Tpo $(DEPDIR)/lobSTR-EntropyDetection.Po
#	source='EntropyDetection.cpp' object='lobSTR-EntropyDetection.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(lobSTR_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lobSTR-EntropyDetection.obj `if test -f 'EntropyDetection.cpp'; then $(CYGPATH_W) 'EntropyDetection.cpp'; else $(CYGPATH_W) '$(srcdir)/EntropyDetection.cpp'; fi`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-binPROGRAMS


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
