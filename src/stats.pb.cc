// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stats.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lobstrstats {

namespace {

const ::google::protobuf::Descriptor* TrainParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrainParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* StepSizePDF_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StepSizePDF_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllelotypeTrainRun_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllelotypeTrainRun_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeriodGenotypeCategory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeriodGenotypeCategory_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClassifyStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClassifyStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllelotypeClassifyRun_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllelotypeClassifyRun_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_stats_2eproto() {
  protobuf_AddDesc_stats_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "stats.proto");
  GOOGLE_CHECK(file != NULL);
  TrainParams_descriptor_ = file->message_type(0);
  static const int TrainParams_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainParams, haploid_chroms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainParams, num_training_reads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainParams, num_discarded_loci_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainParams, num_training_loci_),
  };
  TrainParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrainParams_descriptor_,
      TrainParams::default_instance_,
      TrainParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrainParams));
  StepSizePDF_descriptor_ = file->message_type(1);
  static const int StepSizePDF_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepSizePDF, prob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepSizePDF, observerd_),
  };
  StepSizePDF_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StepSizePDF_descriptor_,
      StepSizePDF::default_instance_,
      StepSizePDF_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepSizePDF, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepSizePDF, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StepSizePDF));
  ModelParams_descriptor_ = file->message_type(2);
  static const int ModelParams_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParams, sprob_coef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParams, nonunit_stepsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParams, pincr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParams, stepsizepdf_),
  };
  ModelParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelParams_descriptor_,
      ModelParams::default_instance_,
      ModelParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelParams));
  AllelotypeTrainRun_descriptor_ = file->message_type(3);
  static const int AllelotypeTrainRun_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllelotypeTrainRun, trainparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllelotypeTrainRun, modelparams_),
  };
  AllelotypeTrainRun_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllelotypeTrainRun_descriptor_,
      AllelotypeTrainRun::default_instance_,
      AllelotypeTrainRun_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllelotypeTrainRun, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllelotypeTrainRun, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllelotypeTrainRun));
  PeriodGenotypeCategory_descriptor_ = file->message_type(4);
  static const int PeriodGenotypeCategory_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeriodGenotypeCategory, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeriodGenotypeCategory, aa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeriodGenotypeCategory, ab_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeriodGenotypeCategory, bb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeriodGenotypeCategory, bc_),
  };
  PeriodGenotypeCategory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PeriodGenotypeCategory_descriptor_,
      PeriodGenotypeCategory::default_instance_,
      PeriodGenotypeCategory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeriodGenotypeCategory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeriodGenotypeCategory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PeriodGenotypeCategory));
  ClassifyStats_descriptor_ = file->message_type(5);
  static const int ClassifyStats_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassifyStats, numcalls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassifyStats, numcalls5x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassifyStats, numcallsq9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassifyStats, meancov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassifyStats, meanscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassifyStats, pergenotypes_),
  };
  ClassifyStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClassifyStats_descriptor_,
      ClassifyStats::default_instance_,
      ClassifyStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassifyStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassifyStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClassifyStats));
  AllelotypeClassifyRun_descriptor_ = file->message_type(6);
  static const int AllelotypeClassifyRun_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllelotypeClassifyRun, modelparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllelotypeClassifyRun, stats_),
  };
  AllelotypeClassifyRun_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllelotypeClassifyRun_descriptor_,
      AllelotypeClassifyRun::default_instance_,
      AllelotypeClassifyRun_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllelotypeClassifyRun, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllelotypeClassifyRun, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllelotypeClassifyRun));
  RunInfo_descriptor_ = file->message_type(7);
  static const int RunInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunInfo, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunInfo, gitversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunInfo, machtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunInfo, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunInfo, trainrun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunInfo, classifyrun_),
  };
  RunInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunInfo_descriptor_,
      RunInfo::default_instance_,
      RunInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_stats_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrainParams_descriptor_, &TrainParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StepSizePDF_descriptor_, &StepSizePDF::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelParams_descriptor_, &ModelParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllelotypeTrainRun_descriptor_, &AllelotypeTrainRun::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PeriodGenotypeCategory_descriptor_, &PeriodGenotypeCategory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClassifyStats_descriptor_, &ClassifyStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllelotypeClassifyRun_descriptor_, &AllelotypeClassifyRun::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunInfo_descriptor_, &RunInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_stats_2eproto() {
  delete TrainParams::default_instance_;
  delete TrainParams_reflection_;
  delete StepSizePDF::default_instance_;
  delete StepSizePDF_reflection_;
  delete ModelParams::default_instance_;
  delete ModelParams_reflection_;
  delete AllelotypeTrainRun::default_instance_;
  delete AllelotypeTrainRun_reflection_;
  delete PeriodGenotypeCategory::default_instance_;
  delete PeriodGenotypeCategory_reflection_;
  delete ClassifyStats::default_instance_;
  delete ClassifyStats_reflection_;
  delete AllelotypeClassifyRun::default_instance_;
  delete AllelotypeClassifyRun_reflection_;
  delete RunInfo::default_instance_;
  delete RunInfo_reflection_;
}

void protobuf_AddDesc_stats_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013stats.proto\022\013lobstrstats\"x\n\013TrainParam"
    "s\022\026\n\016haploid_chroms\030\001 \001(\t\022\032\n\022num_trainin"
    "g_reads\030\002 \001(\005\022\032\n\022num_discarded_loci\030\003 \001("
    "\005\022\031\n\021num_training_loci\030\004 \001(\005\".\n\013StepSize"
    "PDF\022\014\n\004prob\030\001 \003(\002\022\021\n\tobserverd\030\002 \003(\005\"y\n\013"
    "ModelParams\022\022\n\nsprob_coef\030\001 \003(\002\022\030\n\020nonun"
    "it_stepsize\030\002 \003(\002\022\r\n\005pincr\030\003 \001(\002\022-\n\013step"
    "sizepdf\030\004 \003(\0132\030.lobstrstats.StepSizePDF\""
    "r\n\022AllelotypeTrainRun\022-\n\013trainparams\030\001 \001"
    "(\0132\030.lobstrstats.TrainParams\022-\n\013modelpar"
    "ams\030\002 \001(\0132\030.lobstrstats.ModelParams\"X\n\026P"
    "eriodGenotypeCategory\022\016\n\006period\030\001 \001(\005\022\n\n"
    "\002aa\030\002 \001(\002\022\n\n\002ab\030\003 \001(\002\022\n\n\002bb\030\004 \001(\002\022\n\n\002bc\030"
    "\005 \001(\002\"\250\001\n\rClassifyStats\022\020\n\010numcalls\030\001 \001("
    "\005\022\022\n\nnumcalls5x\030\002 \001(\005\022\022\n\nnumcallsQ9\030\003 \001("
    "\005\022\017\n\007meancov\030\004 \001(\002\022\021\n\tmeanscore\030\006 \001(\002\0229\n"
    "\014pergenotypes\030\007 \003(\0132#.lobstrstats.Period"
    "GenotypeCategory\"q\n\025AllelotypeClassifyRu"
    "n\022-\n\013modelparams\030\001 \001(\0132\030.lobstrstats.Mod"
    "elParams\022)\n\005stats\030\002 \001(\0132\032.lobstrstats.Cl"
    "assifyStats\"\336\001\n\007RunInfo\022\021\n\tstarttime\030\001 \001"
    "(\t\022\017\n\007endtime\030\002 \001(\t\022\016\n\006params\030\003 \001(\t\022\022\n\ng"
    "itversion\030\004 \001(\t\022\020\n\010machtype\030\005 \001(\t\022\r\n\005err"
    "or\030\006 \001(\t\0221\n\010trainrun\030\007 \001(\0132\037.lobstrstats"
    ".AllelotypeTrainRun\0227\n\013classifyrun\030\010 \001(\013"
    "2\".lobstrstats.AllelotypeClassifyRun", 1036);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stats.proto", &protobuf_RegisterTypes);
  TrainParams::default_instance_ = new TrainParams();
  StepSizePDF::default_instance_ = new StepSizePDF();
  ModelParams::default_instance_ = new ModelParams();
  AllelotypeTrainRun::default_instance_ = new AllelotypeTrainRun();
  PeriodGenotypeCategory::default_instance_ = new PeriodGenotypeCategory();
  ClassifyStats::default_instance_ = new ClassifyStats();
  AllelotypeClassifyRun::default_instance_ = new AllelotypeClassifyRun();
  RunInfo::default_instance_ = new RunInfo();
  TrainParams::default_instance_->InitAsDefaultInstance();
  StepSizePDF::default_instance_->InitAsDefaultInstance();
  ModelParams::default_instance_->InitAsDefaultInstance();
  AllelotypeTrainRun::default_instance_->InitAsDefaultInstance();
  PeriodGenotypeCategory::default_instance_->InitAsDefaultInstance();
  ClassifyStats::default_instance_->InitAsDefaultInstance();
  AllelotypeClassifyRun::default_instance_->InitAsDefaultInstance();
  RunInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_stats_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_stats_2eproto {
  StaticDescriptorInitializer_stats_2eproto() {
    protobuf_AddDesc_stats_2eproto();
  }
} static_descriptor_initializer_stats_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TrainParams::kHaploidChromsFieldNumber;
const int TrainParams::kNumTrainingReadsFieldNumber;
const int TrainParams::kNumDiscardedLociFieldNumber;
const int TrainParams::kNumTrainingLociFieldNumber;
#endif  // !_MSC_VER

TrainParams::TrainParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrainParams::InitAsDefaultInstance() {
}

TrainParams::TrainParams(const TrainParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrainParams::SharedCtor() {
  _cached_size_ = 0;
  haploid_chroms_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_training_reads_ = 0;
  num_discarded_loci_ = 0;
  num_training_loci_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrainParams::~TrainParams() {
  SharedDtor();
}

void TrainParams::SharedDtor() {
  if (haploid_chroms_ != &::google::protobuf::internal::kEmptyString) {
    delete haploid_chroms_;
  }
  if (this != default_instance_) {
  }
}

void TrainParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrainParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrainParams_descriptor_;
}

const TrainParams& TrainParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stats_2eproto();
  return *default_instance_;
}

TrainParams* TrainParams::default_instance_ = NULL;

TrainParams* TrainParams::New() const {
  return new TrainParams;
}

void TrainParams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_haploid_chroms()) {
      if (haploid_chroms_ != &::google::protobuf::internal::kEmptyString) {
        haploid_chroms_->clear();
      }
    }
    num_training_reads_ = 0;
    num_discarded_loci_ = 0;
    num_training_loci_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrainParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string haploid_chroms = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_haploid_chroms()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->haploid_chroms().data(), this->haploid_chroms().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_training_reads;
        break;
      }

      // optional int32 num_training_reads = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_training_reads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_training_reads_)));
          set_has_num_training_reads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_discarded_loci;
        break;
      }

      // optional int32 num_discarded_loci = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_discarded_loci:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_discarded_loci_)));
          set_has_num_discarded_loci();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_training_loci;
        break;
      }

      // optional int32 num_training_loci = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_training_loci:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_training_loci_)));
          set_has_num_training_loci();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrainParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string haploid_chroms = 1;
  if (has_haploid_chroms()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->haploid_chroms().data(), this->haploid_chroms().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->haploid_chroms(), output);
  }

  // optional int32 num_training_reads = 2;
  if (has_num_training_reads()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_training_reads(), output);
  }

  // optional int32 num_discarded_loci = 3;
  if (has_num_discarded_loci()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_discarded_loci(), output);
  }

  // optional int32 num_training_loci = 4;
  if (has_num_training_loci()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_training_loci(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrainParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string haploid_chroms = 1;
  if (has_haploid_chroms()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->haploid_chroms().data(), this->haploid_chroms().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->haploid_chroms(), target);
  }

  // optional int32 num_training_reads = 2;
  if (has_num_training_reads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_training_reads(), target);
  }

  // optional int32 num_discarded_loci = 3;
  if (has_num_discarded_loci()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_discarded_loci(), target);
  }

  // optional int32 num_training_loci = 4;
  if (has_num_training_loci()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_training_loci(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrainParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string haploid_chroms = 1;
    if (has_haploid_chroms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->haploid_chroms());
    }

    // optional int32 num_training_reads = 2;
    if (has_num_training_reads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_training_reads());
    }

    // optional int32 num_discarded_loci = 3;
    if (has_num_discarded_loci()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_discarded_loci());
    }

    // optional int32 num_training_loci = 4;
    if (has_num_training_loci()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_training_loci());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrainParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrainParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrainParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrainParams::MergeFrom(const TrainParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_haploid_chroms()) {
      set_haploid_chroms(from.haploid_chroms());
    }
    if (from.has_num_training_reads()) {
      set_num_training_reads(from.num_training_reads());
    }
    if (from.has_num_discarded_loci()) {
      set_num_discarded_loci(from.num_discarded_loci());
    }
    if (from.has_num_training_loci()) {
      set_num_training_loci(from.num_training_loci());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrainParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainParams::CopyFrom(const TrainParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainParams::IsInitialized() const {

  return true;
}

void TrainParams::Swap(TrainParams* other) {
  if (other != this) {
    std::swap(haploid_chroms_, other->haploid_chroms_);
    std::swap(num_training_reads_, other->num_training_reads_);
    std::swap(num_discarded_loci_, other->num_discarded_loci_);
    std::swap(num_training_loci_, other->num_training_loci_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrainParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrainParams_descriptor_;
  metadata.reflection = TrainParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StepSizePDF::kProbFieldNumber;
const int StepSizePDF::kObserverdFieldNumber;
#endif  // !_MSC_VER

StepSizePDF::StepSizePDF()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StepSizePDF::InitAsDefaultInstance() {
}

StepSizePDF::StepSizePDF(const StepSizePDF& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StepSizePDF::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StepSizePDF::~StepSizePDF() {
  SharedDtor();
}

void StepSizePDF::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StepSizePDF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StepSizePDF::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StepSizePDF_descriptor_;
}

const StepSizePDF& StepSizePDF::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stats_2eproto();
  return *default_instance_;
}

StepSizePDF* StepSizePDF::default_instance_ = NULL;

StepSizePDF* StepSizePDF::New() const {
  return new StepSizePDF;
}

void StepSizePDF::Clear() {
  prob_.Clear();
  observerd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StepSizePDF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float prob = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_prob())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_prob())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_prob;
        if (input->ExpectTag(16)) goto parse_observerd;
        break;
      }

      // repeated int32 observerd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_observerd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_observerd())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_observerd())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_observerd;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StepSizePDF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float prob = 1;
  for (int i = 0; i < this->prob_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->prob(i), output);
  }

  // repeated int32 observerd = 2;
  for (int i = 0; i < this->observerd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->observerd(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StepSizePDF::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float prob = 1;
  for (int i = 0; i < this->prob_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->prob(i), target);
  }

  // repeated int32 observerd = 2;
  for (int i = 0; i < this->observerd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->observerd(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StepSizePDF::ByteSize() const {
  int total_size = 0;

  // repeated float prob = 1;
  {
    int data_size = 0;
    data_size = 4 * this->prob_size();
    total_size += 1 * this->prob_size() + data_size;
  }

  // repeated int32 observerd = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->observerd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->observerd(i));
    }
    total_size += 1 * this->observerd_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StepSizePDF::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StepSizePDF* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StepSizePDF*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StepSizePDF::MergeFrom(const StepSizePDF& from) {
  GOOGLE_CHECK_NE(&from, this);
  prob_.MergeFrom(from.prob_);
  observerd_.MergeFrom(from.observerd_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StepSizePDF::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepSizePDF::CopyFrom(const StepSizePDF& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepSizePDF::IsInitialized() const {

  return true;
}

void StepSizePDF::Swap(StepSizePDF* other) {
  if (other != this) {
    prob_.Swap(&other->prob_);
    observerd_.Swap(&other->observerd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StepSizePDF::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StepSizePDF_descriptor_;
  metadata.reflection = StepSizePDF_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModelParams::kSprobCoefFieldNumber;
const int ModelParams::kNonunitStepsizeFieldNumber;
const int ModelParams::kPincrFieldNumber;
const int ModelParams::kStepsizepdfFieldNumber;
#endif  // !_MSC_VER

ModelParams::ModelParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModelParams::InitAsDefaultInstance() {
}

ModelParams::ModelParams(const ModelParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModelParams::SharedCtor() {
  _cached_size_ = 0;
  pincr_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelParams::~ModelParams() {
  SharedDtor();
}

void ModelParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModelParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelParams_descriptor_;
}

const ModelParams& ModelParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stats_2eproto();
  return *default_instance_;
}

ModelParams* ModelParams::default_instance_ = NULL;

ModelParams* ModelParams::New() const {
  return new ModelParams;
}

void ModelParams::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    pincr_ = 0;
  }
  sprob_coef_.Clear();
  nonunit_stepsize_.Clear();
  stepsizepdf_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float sprob_coef = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sprob_coef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_sprob_coef())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_sprob_coef())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_sprob_coef;
        if (input->ExpectTag(21)) goto parse_nonunit_stepsize;
        break;
      }

      // repeated float nonunit_stepsize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_nonunit_stepsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_nonunit_stepsize())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_nonunit_stepsize())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_nonunit_stepsize;
        if (input->ExpectTag(29)) goto parse_pincr;
        break;
      }

      // optional float pincr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pincr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pincr_)));
          set_has_pincr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stepsizepdf;
        break;
      }

      // repeated .lobstrstats.StepSizePDF stepsizepdf = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stepsizepdf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stepsizepdf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stepsizepdf;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModelParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float sprob_coef = 1;
  for (int i = 0; i < this->sprob_coef_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->sprob_coef(i), output);
  }

  // repeated float nonunit_stepsize = 2;
  for (int i = 0; i < this->nonunit_stepsize_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->nonunit_stepsize(i), output);
  }

  // optional float pincr = 3;
  if (has_pincr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pincr(), output);
  }

  // repeated .lobstrstats.StepSizePDF stepsizepdf = 4;
  for (int i = 0; i < this->stepsizepdf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stepsizepdf(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModelParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float sprob_coef = 1;
  for (int i = 0; i < this->sprob_coef_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->sprob_coef(i), target);
  }

  // repeated float nonunit_stepsize = 2;
  for (int i = 0; i < this->nonunit_stepsize_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->nonunit_stepsize(i), target);
  }

  // optional float pincr = 3;
  if (has_pincr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pincr(), target);
  }

  // repeated .lobstrstats.StepSizePDF stepsizepdf = 4;
  for (int i = 0; i < this->stepsizepdf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stepsizepdf(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModelParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional float pincr = 3;
    if (has_pincr()) {
      total_size += 1 + 4;
    }

  }
  // repeated float sprob_coef = 1;
  {
    int data_size = 0;
    data_size = 4 * this->sprob_coef_size();
    total_size += 1 * this->sprob_coef_size() + data_size;
  }

  // repeated float nonunit_stepsize = 2;
  {
    int data_size = 0;
    data_size = 4 * this->nonunit_stepsize_size();
    total_size += 1 * this->nonunit_stepsize_size() + data_size;
  }

  // repeated .lobstrstats.StepSizePDF stepsizepdf = 4;
  total_size += 1 * this->stepsizepdf_size();
  for (int i = 0; i < this->stepsizepdf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stepsizepdf(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelParams::MergeFrom(const ModelParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  sprob_coef_.MergeFrom(from.sprob_coef_);
  nonunit_stepsize_.MergeFrom(from.nonunit_stepsize_);
  stepsizepdf_.MergeFrom(from.stepsizepdf_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_pincr()) {
      set_pincr(from.pincr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelParams::CopyFrom(const ModelParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelParams::IsInitialized() const {

  return true;
}

void ModelParams::Swap(ModelParams* other) {
  if (other != this) {
    sprob_coef_.Swap(&other->sprob_coef_);
    nonunit_stepsize_.Swap(&other->nonunit_stepsize_);
    std::swap(pincr_, other->pincr_);
    stepsizepdf_.Swap(&other->stepsizepdf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelParams_descriptor_;
  metadata.reflection = ModelParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllelotypeTrainRun::kTrainparamsFieldNumber;
const int AllelotypeTrainRun::kModelparamsFieldNumber;
#endif  // !_MSC_VER

AllelotypeTrainRun::AllelotypeTrainRun()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllelotypeTrainRun::InitAsDefaultInstance() {
  trainparams_ = const_cast< ::lobstrstats::TrainParams*>(&::lobstrstats::TrainParams::default_instance());
  modelparams_ = const_cast< ::lobstrstats::ModelParams*>(&::lobstrstats::ModelParams::default_instance());
}

AllelotypeTrainRun::AllelotypeTrainRun(const AllelotypeTrainRun& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllelotypeTrainRun::SharedCtor() {
  _cached_size_ = 0;
  trainparams_ = NULL;
  modelparams_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllelotypeTrainRun::~AllelotypeTrainRun() {
  SharedDtor();
}

void AllelotypeTrainRun::SharedDtor() {
  if (this != default_instance_) {
    delete trainparams_;
    delete modelparams_;
  }
}

void AllelotypeTrainRun::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllelotypeTrainRun::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllelotypeTrainRun_descriptor_;
}

const AllelotypeTrainRun& AllelotypeTrainRun::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stats_2eproto();
  return *default_instance_;
}

AllelotypeTrainRun* AllelotypeTrainRun::default_instance_ = NULL;

AllelotypeTrainRun* AllelotypeTrainRun::New() const {
  return new AllelotypeTrainRun;
}

void AllelotypeTrainRun::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_trainparams()) {
      if (trainparams_ != NULL) trainparams_->::lobstrstats::TrainParams::Clear();
    }
    if (has_modelparams()) {
      if (modelparams_ != NULL) modelparams_->::lobstrstats::ModelParams::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllelotypeTrainRun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lobstrstats.TrainParams trainparams = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trainparams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_modelparams;
        break;
      }

      // optional .lobstrstats.ModelParams modelparams = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modelparams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modelparams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllelotypeTrainRun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .lobstrstats.TrainParams trainparams = 1;
  if (has_trainparams()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trainparams(), output);
  }

  // optional .lobstrstats.ModelParams modelparams = 2;
  if (has_modelparams()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->modelparams(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllelotypeTrainRun::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .lobstrstats.TrainParams trainparams = 1;
  if (has_trainparams()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->trainparams(), target);
  }

  // optional .lobstrstats.ModelParams modelparams = 2;
  if (has_modelparams()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->modelparams(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllelotypeTrainRun::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .lobstrstats.TrainParams trainparams = 1;
    if (has_trainparams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trainparams());
    }

    // optional .lobstrstats.ModelParams modelparams = 2;
    if (has_modelparams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modelparams());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllelotypeTrainRun::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllelotypeTrainRun* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllelotypeTrainRun*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllelotypeTrainRun::MergeFrom(const AllelotypeTrainRun& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trainparams()) {
      mutable_trainparams()->::lobstrstats::TrainParams::MergeFrom(from.trainparams());
    }
    if (from.has_modelparams()) {
      mutable_modelparams()->::lobstrstats::ModelParams::MergeFrom(from.modelparams());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllelotypeTrainRun::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllelotypeTrainRun::CopyFrom(const AllelotypeTrainRun& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllelotypeTrainRun::IsInitialized() const {

  return true;
}

void AllelotypeTrainRun::Swap(AllelotypeTrainRun* other) {
  if (other != this) {
    std::swap(trainparams_, other->trainparams_);
    std::swap(modelparams_, other->modelparams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllelotypeTrainRun::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllelotypeTrainRun_descriptor_;
  metadata.reflection = AllelotypeTrainRun_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeriodGenotypeCategory::kPeriodFieldNumber;
const int PeriodGenotypeCategory::kAaFieldNumber;
const int PeriodGenotypeCategory::kAbFieldNumber;
const int PeriodGenotypeCategory::kBbFieldNumber;
const int PeriodGenotypeCategory::kBcFieldNumber;
#endif  // !_MSC_VER

PeriodGenotypeCategory::PeriodGenotypeCategory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PeriodGenotypeCategory::InitAsDefaultInstance() {
}

PeriodGenotypeCategory::PeriodGenotypeCategory(const PeriodGenotypeCategory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PeriodGenotypeCategory::SharedCtor() {
  _cached_size_ = 0;
  period_ = 0;
  aa_ = 0;
  ab_ = 0;
  bb_ = 0;
  bc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PeriodGenotypeCategory::~PeriodGenotypeCategory() {
  SharedDtor();
}

void PeriodGenotypeCategory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PeriodGenotypeCategory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeriodGenotypeCategory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeriodGenotypeCategory_descriptor_;
}

const PeriodGenotypeCategory& PeriodGenotypeCategory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stats_2eproto();
  return *default_instance_;
}

PeriodGenotypeCategory* PeriodGenotypeCategory::default_instance_ = NULL;

PeriodGenotypeCategory* PeriodGenotypeCategory::New() const {
  return new PeriodGenotypeCategory;
}

void PeriodGenotypeCategory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    period_ = 0;
    aa_ = 0;
    ab_ = 0;
    bb_ = 0;
    bc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PeriodGenotypeCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 period = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_aa;
        break;
      }

      // optional float aa = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_aa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aa_)));
          set_has_aa();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_ab;
        break;
      }

      // optional float ab = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ab:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ab_)));
          set_has_ab();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_bb;
        break;
      }

      // optional float bb = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bb_)));
          set_has_bb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_bc;
        break;
      }

      // optional float bc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bc_)));
          set_has_bc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PeriodGenotypeCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 period = 1;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->period(), output);
  }

  // optional float aa = 2;
  if (has_aa()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->aa(), output);
  }

  // optional float ab = 3;
  if (has_ab()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->ab(), output);
  }

  // optional float bb = 4;
  if (has_bb()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bb(), output);
  }

  // optional float bc = 5;
  if (has_bc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->bc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PeriodGenotypeCategory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 period = 1;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->period(), target);
  }

  // optional float aa = 2;
  if (has_aa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->aa(), target);
  }

  // optional float ab = 3;
  if (has_ab()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->ab(), target);
  }

  // optional float bb = 4;
  if (has_bb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->bb(), target);
  }

  // optional float bc = 5;
  if (has_bc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->bc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PeriodGenotypeCategory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 period = 1;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->period());
    }

    // optional float aa = 2;
    if (has_aa()) {
      total_size += 1 + 4;
    }

    // optional float ab = 3;
    if (has_ab()) {
      total_size += 1 + 4;
    }

    // optional float bb = 4;
    if (has_bb()) {
      total_size += 1 + 4;
    }

    // optional float bc = 5;
    if (has_bc()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeriodGenotypeCategory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PeriodGenotypeCategory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeriodGenotypeCategory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeriodGenotypeCategory::MergeFrom(const PeriodGenotypeCategory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_period()) {
      set_period(from.period());
    }
    if (from.has_aa()) {
      set_aa(from.aa());
    }
    if (from.has_ab()) {
      set_ab(from.ab());
    }
    if (from.has_bb()) {
      set_bb(from.bb());
    }
    if (from.has_bc()) {
      set_bc(from.bc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PeriodGenotypeCategory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeriodGenotypeCategory::CopyFrom(const PeriodGenotypeCategory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeriodGenotypeCategory::IsInitialized() const {

  return true;
}

void PeriodGenotypeCategory::Swap(PeriodGenotypeCategory* other) {
  if (other != this) {
    std::swap(period_, other->period_);
    std::swap(aa_, other->aa_);
    std::swap(ab_, other->ab_);
    std::swap(bb_, other->bb_);
    std::swap(bc_, other->bc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PeriodGenotypeCategory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeriodGenotypeCategory_descriptor_;
  metadata.reflection = PeriodGenotypeCategory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClassifyStats::kNumcallsFieldNumber;
const int ClassifyStats::kNumcalls5XFieldNumber;
const int ClassifyStats::kNumcallsQ9FieldNumber;
const int ClassifyStats::kMeancovFieldNumber;
const int ClassifyStats::kMeanscoreFieldNumber;
const int ClassifyStats::kPergenotypesFieldNumber;
#endif  // !_MSC_VER

ClassifyStats::ClassifyStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClassifyStats::InitAsDefaultInstance() {
}

ClassifyStats::ClassifyStats(const ClassifyStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClassifyStats::SharedCtor() {
  _cached_size_ = 0;
  numcalls_ = 0;
  numcalls5x_ = 0;
  numcallsq9_ = 0;
  meancov_ = 0;
  meanscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClassifyStats::~ClassifyStats() {
  SharedDtor();
}

void ClassifyStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClassifyStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClassifyStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClassifyStats_descriptor_;
}

const ClassifyStats& ClassifyStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stats_2eproto();
  return *default_instance_;
}

ClassifyStats* ClassifyStats::default_instance_ = NULL;

ClassifyStats* ClassifyStats::New() const {
  return new ClassifyStats;
}

void ClassifyStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    numcalls_ = 0;
    numcalls5x_ = 0;
    numcallsq9_ = 0;
    meancov_ = 0;
    meanscore_ = 0;
  }
  pergenotypes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClassifyStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 numcalls = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numcalls_)));
          set_has_numcalls();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_numcalls5x;
        break;
      }

      // optional int32 numcalls5x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numcalls5x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numcalls5x_)));
          set_has_numcalls5x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_numcallsQ9;
        break;
      }

      // optional int32 numcallsQ9 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numcallsQ9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numcallsq9_)));
          set_has_numcallsq9();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_meancov;
        break;
      }

      // optional float meancov = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_meancov:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &meancov_)));
          set_has_meancov();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_meanscore;
        break;
      }

      // optional float meanscore = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_meanscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &meanscore_)));
          set_has_meanscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pergenotypes;
        break;
      }

      // repeated .lobstrstats.PeriodGenotypeCategory pergenotypes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pergenotypes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pergenotypes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pergenotypes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClassifyStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 numcalls = 1;
  if (has_numcalls()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->numcalls(), output);
  }

  // optional int32 numcalls5x = 2;
  if (has_numcalls5x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numcalls5x(), output);
  }

  // optional int32 numcallsQ9 = 3;
  if (has_numcallsq9()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->numcallsq9(), output);
  }

  // optional float meancov = 4;
  if (has_meancov()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->meancov(), output);
  }

  // optional float meanscore = 6;
  if (has_meanscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->meanscore(), output);
  }

  // repeated .lobstrstats.PeriodGenotypeCategory pergenotypes = 7;
  for (int i = 0; i < this->pergenotypes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pergenotypes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClassifyStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 numcalls = 1;
  if (has_numcalls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->numcalls(), target);
  }

  // optional int32 numcalls5x = 2;
  if (has_numcalls5x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numcalls5x(), target);
  }

  // optional int32 numcallsQ9 = 3;
  if (has_numcallsq9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numcallsq9(), target);
  }

  // optional float meancov = 4;
  if (has_meancov()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->meancov(), target);
  }

  // optional float meanscore = 6;
  if (has_meanscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->meanscore(), target);
  }

  // repeated .lobstrstats.PeriodGenotypeCategory pergenotypes = 7;
  for (int i = 0; i < this->pergenotypes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pergenotypes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClassifyStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 numcalls = 1;
    if (has_numcalls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numcalls());
    }

    // optional int32 numcalls5x = 2;
    if (has_numcalls5x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numcalls5x());
    }

    // optional int32 numcallsQ9 = 3;
    if (has_numcallsq9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numcallsq9());
    }

    // optional float meancov = 4;
    if (has_meancov()) {
      total_size += 1 + 4;
    }

    // optional float meanscore = 6;
    if (has_meanscore()) {
      total_size += 1 + 4;
    }

  }
  // repeated .lobstrstats.PeriodGenotypeCategory pergenotypes = 7;
  total_size += 1 * this->pergenotypes_size();
  for (int i = 0; i < this->pergenotypes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pergenotypes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClassifyStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClassifyStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClassifyStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClassifyStats::MergeFrom(const ClassifyStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  pergenotypes_.MergeFrom(from.pergenotypes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numcalls()) {
      set_numcalls(from.numcalls());
    }
    if (from.has_numcalls5x()) {
      set_numcalls5x(from.numcalls5x());
    }
    if (from.has_numcallsq9()) {
      set_numcallsq9(from.numcallsq9());
    }
    if (from.has_meancov()) {
      set_meancov(from.meancov());
    }
    if (from.has_meanscore()) {
      set_meanscore(from.meanscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClassifyStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassifyStats::CopyFrom(const ClassifyStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassifyStats::IsInitialized() const {

  return true;
}

void ClassifyStats::Swap(ClassifyStats* other) {
  if (other != this) {
    std::swap(numcalls_, other->numcalls_);
    std::swap(numcalls5x_, other->numcalls5x_);
    std::swap(numcallsq9_, other->numcallsq9_);
    std::swap(meancov_, other->meancov_);
    std::swap(meanscore_, other->meanscore_);
    pergenotypes_.Swap(&other->pergenotypes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClassifyStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClassifyStats_descriptor_;
  metadata.reflection = ClassifyStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllelotypeClassifyRun::kModelparamsFieldNumber;
const int AllelotypeClassifyRun::kStatsFieldNumber;
#endif  // !_MSC_VER

AllelotypeClassifyRun::AllelotypeClassifyRun()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllelotypeClassifyRun::InitAsDefaultInstance() {
  modelparams_ = const_cast< ::lobstrstats::ModelParams*>(&::lobstrstats::ModelParams::default_instance());
  stats_ = const_cast< ::lobstrstats::ClassifyStats*>(&::lobstrstats::ClassifyStats::default_instance());
}

AllelotypeClassifyRun::AllelotypeClassifyRun(const AllelotypeClassifyRun& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllelotypeClassifyRun::SharedCtor() {
  _cached_size_ = 0;
  modelparams_ = NULL;
  stats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllelotypeClassifyRun::~AllelotypeClassifyRun() {
  SharedDtor();
}

void AllelotypeClassifyRun::SharedDtor() {
  if (this != default_instance_) {
    delete modelparams_;
    delete stats_;
  }
}

void AllelotypeClassifyRun::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllelotypeClassifyRun::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllelotypeClassifyRun_descriptor_;
}

const AllelotypeClassifyRun& AllelotypeClassifyRun::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stats_2eproto();
  return *default_instance_;
}

AllelotypeClassifyRun* AllelotypeClassifyRun::default_instance_ = NULL;

AllelotypeClassifyRun* AllelotypeClassifyRun::New() const {
  return new AllelotypeClassifyRun;
}

void AllelotypeClassifyRun::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_modelparams()) {
      if (modelparams_ != NULL) modelparams_->::lobstrstats::ModelParams::Clear();
    }
    if (has_stats()) {
      if (stats_ != NULL) stats_->::lobstrstats::ClassifyStats::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllelotypeClassifyRun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lobstrstats.ModelParams modelparams = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modelparams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stats;
        break;
      }

      // optional .lobstrstats.ClassifyStats stats = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllelotypeClassifyRun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .lobstrstats.ModelParams modelparams = 1;
  if (has_modelparams()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->modelparams(), output);
  }

  // optional .lobstrstats.ClassifyStats stats = 2;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stats(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllelotypeClassifyRun::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .lobstrstats.ModelParams modelparams = 1;
  if (has_modelparams()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->modelparams(), target);
  }

  // optional .lobstrstats.ClassifyStats stats = 2;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stats(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllelotypeClassifyRun::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .lobstrstats.ModelParams modelparams = 1;
    if (has_modelparams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modelparams());
    }

    // optional .lobstrstats.ClassifyStats stats = 2;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllelotypeClassifyRun::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllelotypeClassifyRun* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllelotypeClassifyRun*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllelotypeClassifyRun::MergeFrom(const AllelotypeClassifyRun& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modelparams()) {
      mutable_modelparams()->::lobstrstats::ModelParams::MergeFrom(from.modelparams());
    }
    if (from.has_stats()) {
      mutable_stats()->::lobstrstats::ClassifyStats::MergeFrom(from.stats());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllelotypeClassifyRun::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllelotypeClassifyRun::CopyFrom(const AllelotypeClassifyRun& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllelotypeClassifyRun::IsInitialized() const {

  return true;
}

void AllelotypeClassifyRun::Swap(AllelotypeClassifyRun* other) {
  if (other != this) {
    std::swap(modelparams_, other->modelparams_);
    std::swap(stats_, other->stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllelotypeClassifyRun::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllelotypeClassifyRun_descriptor_;
  metadata.reflection = AllelotypeClassifyRun_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RunInfo::kStarttimeFieldNumber;
const int RunInfo::kEndtimeFieldNumber;
const int RunInfo::kParamsFieldNumber;
const int RunInfo::kGitversionFieldNumber;
const int RunInfo::kMachtypeFieldNumber;
const int RunInfo::kErrorFieldNumber;
const int RunInfo::kTrainrunFieldNumber;
const int RunInfo::kClassifyrunFieldNumber;
#endif  // !_MSC_VER

RunInfo::RunInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RunInfo::InitAsDefaultInstance() {
  trainrun_ = const_cast< ::lobstrstats::AllelotypeTrainRun*>(&::lobstrstats::AllelotypeTrainRun::default_instance());
  classifyrun_ = const_cast< ::lobstrstats::AllelotypeClassifyRun*>(&::lobstrstats::AllelotypeClassifyRun::default_instance());
}

RunInfo::RunInfo(const RunInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RunInfo::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  params_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gitversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trainrun_ = NULL;
  classifyrun_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunInfo::~RunInfo() {
  SharedDtor();
}

void RunInfo::SharedDtor() {
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    delete starttime_;
  }
  if (endtime_ != &::google::protobuf::internal::kEmptyString) {
    delete endtime_;
  }
  if (params_ != &::google::protobuf::internal::kEmptyString) {
    delete params_;
  }
  if (gitversion_ != &::google::protobuf::internal::kEmptyString) {
    delete gitversion_;
  }
  if (machtype_ != &::google::protobuf::internal::kEmptyString) {
    delete machtype_;
  }
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
    delete trainrun_;
    delete classifyrun_;
  }
}

void RunInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunInfo_descriptor_;
}

const RunInfo& RunInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stats_2eproto();
  return *default_instance_;
}

RunInfo* RunInfo::default_instance_ = NULL;

RunInfo* RunInfo::New() const {
  return new RunInfo;
}

void RunInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_starttime()) {
      if (starttime_ != &::google::protobuf::internal::kEmptyString) {
        starttime_->clear();
      }
    }
    if (has_endtime()) {
      if (endtime_ != &::google::protobuf::internal::kEmptyString) {
        endtime_->clear();
      }
    }
    if (has_params()) {
      if (params_ != &::google::protobuf::internal::kEmptyString) {
        params_->clear();
      }
    }
    if (has_gitversion()) {
      if (gitversion_ != &::google::protobuf::internal::kEmptyString) {
        gitversion_->clear();
      }
    }
    if (has_machtype()) {
      if (machtype_ != &::google::protobuf::internal::kEmptyString) {
        machtype_->clear();
      }
    }
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
    if (has_trainrun()) {
      if (trainrun_ != NULL) trainrun_->::lobstrstats::AllelotypeTrainRun::Clear();
    }
    if (has_classifyrun()) {
      if (classifyrun_ != NULL) classifyrun_->::lobstrstats::AllelotypeClassifyRun::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string starttime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_endtime;
        break;
      }

      // optional string endtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->endtime().data(), this->endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_params;
        break;
      }

      // optional string params = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->params().data(), this->params().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gitversion;
        break;
      }

      // optional string gitversion = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gitversion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gitversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gitversion().data(), this->gitversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_machtype;
        break;
      }

      // optional string machtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machtype().data(), this->machtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_error;
        break;
      }

      // optional string error = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_trainrun;
        break;
      }

      // optional .lobstrstats.AllelotypeTrainRun trainrun = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trainrun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trainrun()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_classifyrun;
        break;
      }

      // optional .lobstrstats.AllelotypeClassifyRun classifyrun = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classifyrun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_classifyrun()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RunInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string starttime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->starttime(), output);
  }

  // optional string endtime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->endtime(), output);
  }

  // optional string params = 3;
  if (has_params()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->params().data(), this->params().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->params(), output);
  }

  // optional string gitversion = 4;
  if (has_gitversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gitversion().data(), this->gitversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->gitversion(), output);
  }

  // optional string machtype = 5;
  if (has_machtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machtype().data(), this->machtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->machtype(), output);
  }

  // optional string error = 6;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->error(), output);
  }

  // optional .lobstrstats.AllelotypeTrainRun trainrun = 7;
  if (has_trainrun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->trainrun(), output);
  }

  // optional .lobstrstats.AllelotypeClassifyRun classifyrun = 8;
  if (has_classifyrun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->classifyrun(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RunInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string starttime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->starttime(), target);
  }

  // optional string endtime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->endtime(), target);
  }

  // optional string params = 3;
  if (has_params()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->params().data(), this->params().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->params(), target);
  }

  // optional string gitversion = 4;
  if (has_gitversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gitversion().data(), this->gitversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gitversion(), target);
  }

  // optional string machtype = 5;
  if (has_machtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machtype().data(), this->machtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->machtype(), target);
  }

  // optional string error = 6;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->error(), target);
  }

  // optional .lobstrstats.AllelotypeTrainRun trainrun = 7;
  if (has_trainrun()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->trainrun(), target);
  }

  // optional .lobstrstats.AllelotypeClassifyRun classifyrun = 8;
  if (has_classifyrun()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->classifyrun(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RunInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string starttime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }

    // optional string endtime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }

    // optional string params = 3;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->params());
    }

    // optional string gitversion = 4;
    if (has_gitversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gitversion());
    }

    // optional string machtype = 5;
    if (has_machtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machtype());
    }

    // optional string error = 6;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional .lobstrstats.AllelotypeTrainRun trainrun = 7;
    if (has_trainrun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trainrun());
    }

    // optional .lobstrstats.AllelotypeClassifyRun classifyrun = 8;
    if (has_classifyrun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->classifyrun());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunInfo::MergeFrom(const RunInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_params()) {
      set_params(from.params());
    }
    if (from.has_gitversion()) {
      set_gitversion(from.gitversion());
    }
    if (from.has_machtype()) {
      set_machtype(from.machtype());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_trainrun()) {
      mutable_trainrun()->::lobstrstats::AllelotypeTrainRun::MergeFrom(from.trainrun());
    }
    if (from.has_classifyrun()) {
      mutable_classifyrun()->::lobstrstats::AllelotypeClassifyRun::MergeFrom(from.classifyrun());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunInfo::CopyFrom(const RunInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunInfo::IsInitialized() const {

  return true;
}

void RunInfo::Swap(RunInfo* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(params_, other->params_);
    std::swap(gitversion_, other->gitversion_);
    std::swap(machtype_, other->machtype_);
    std::swap(error_, other->error_);
    std::swap(trainrun_, other->trainrun_);
    std::swap(classifyrun_, other->classifyrun_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunInfo_descriptor_;
  metadata.reflection = RunInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lobstrstats

// @@protoc_insertion_point(global_scope)
