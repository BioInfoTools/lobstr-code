#!/usr/bin/env python

def usage():
    print """
python lobSTR_alignment_checks.py -f <aligned.tab file> [--plot]

e.g.
python lobSTR_alignment_checks.py test.aligned.tab

Note: this script only works with files generated by lobSTR version 2.0.0 or later.

Runs the following lobSTR quality checks on output of lobSTR alignment:
0. Number of aligned reads
1. % of reads that were stitched, single ends, mate of single ends
2. % of reads that are partial coverage
3. % of reads aligned on the reverse strand
4. Mean insert size between aligned paired ends (for paired samples only)
5. % Alignments differing by a non-integer number of repeats

If the --plot option is specified, the following plots are generated:
1. Insert size distribution (for paired samples only)
2. Quality score distribution (for fully spanning reads, only)
3. Difference from reference distribution (separated by period)

Prints all results to stdout

"""

###########################

from checks_utils import *
import math

###########################
PERIOD_COL = 5
DIFF_COL = 11
REV_COL = 13
PARTIAL_COL = 15
SCORE_COL = 16
MATEDIST_COL = 17
STITCH_COL = 18
###########################

try:
    opts, args = getopt.getopt(sys.argv[1:], "hvf:", ["help","verbose","plot","debug"])
except getopt.GetoptError, err:
    print str(err)
    usage()
    sys.exit(2)

args = [item[0] for item in opts]

if ((not "-f" in args)):
    usage()
    sys.exit(2)

# initialize variables
verbose = False
filename = ""
plot = False
debug = False

# set variables
for o,a in opts:
    if o == "-f": filename = a
    if o == "--plot": plot = True
    if o == "--debug": debug = True
    if o == "-v" or o == "--verbose": verbose = True
    if o == "--help" or o == "-h":
        usage()
        sys.exit(0)

###########################

if plot:
    import matplotlib
    matplotlib.use('Agg')
    import matplotlib.pyplot as plt
    plt.rcParams['pdf.fonttype'] = 42
###########################

def GetPercReverse(filename):
    """
    Get percentage of aligned reads on the reverse strand
    """
    cmd = "grep -v version %s| grep -v Period | awk -F'\\t' '($%s!=-1)' | "\
        "awk -F'\\t'  \'{revsum += $(%s)}END"\
        "{print revsum/NR}\'"%(filename, STITCH_COL, REV_COL)
    return ExecuteCmd(cmd, debug)

def GetPercPartial(filename):
    """
    Get percentage of partially spanning reads
    """
    cmd = "grep -v version %s| grep -v Period | awk -F'\\t' '($%s!=-1)' | "\
        "awk  -F'\\t'  \'{parsum += $%s}END"\
        "{print parsum/NR}\'"%(filename, STITCH_COL, PARTIAL_COL)
    return ExecuteCmd(cmd, debug)

def GetReadTypeNumbers(filename):
    """
    Get percentage of reads that are stitched, STR ends, and supporting ends
    """
    # num stitched
    cmd = "grep -v version %s | grep -v Period | awk -F'\\t' '($%s == 1)' | wc -l"%(filename, STITCH_COL)
    num_stitched = ExecuteCmd(cmd, debug)

    # num single ends
    cmd = "grep -v version %s | grep -v Period | awk -F'\\t' '($%s == 0)' | wc -l"%(filename, STITCH_COL)
    num_single_ends = ExecuteCmd(cmd, debug)

    # num supporing ends
    cmd = "grep -v version %s | grep -v Period | awk -F'\\t' '($%s == -1)' | wc -l"%(filename, STITCH_COL)
    num_supp_ends = ExecuteCmd(cmd, debug)

    return num_stitched, num_single_ends, num_supp_ends

def GetPercNonIntAlignments(filename):
    """
    Get percentage of aligned reads differing from
    reference by incomplete repeat unit copy
    Does not include incomplete alignments
    """
    cmd = "cat %s |grep -v version | grep -v Period | awk -F'\\t' '($%s!=-1)' |"\
        "awk -F\"\\t\" \'($%s ==0) {print ($%s%s$%s==0)?0:1}\' | "\
        "awk \'{mean+=$1}END{print mean/NR}\'"%(filename, STITCH_COL, PARTIAL_COL, DIFF_COL, "%", PERIOD_COL)
    return ExecuteCmd(cmd, debug)

def GetMeanInsertSize(filename):
    """
    Get mean distance bewteen STR read and mate pair
    """
    cmd = "cat %s | grep -v version | grep -v Period | "\
        " awk -F'\\t' '($%s==0)' | awk -F'\\t' '($(%s) != -1)' | awk -F'\\t' \'{matesum += $(%s)}END"\
        "{print matesum/NR}\'"%(filename, STITCH_COL, MATEDIST_COL, MATEDIST_COL)
    return ExecuteCmd(cmd, debug)

def GetInsertSizes(filename):
    """
    Get a vector of insert sizes
    """
    cmd = "cat %s | grep -v version | grep -v Period | "\
        " awk -F'\\t' '($%s==0)' | awk -F\"\\t\" '($%s==0)' | "\
        "awk -F'\\t' '($(%s) != -1)' | awk -F'\\t' '{print $(%s)}' "%\
        (filename, STITCH_COL, PARTIAL_COL, MATEDIST_COL, MATEDIST_COL)
    sizes_stdout = ExecuteCmd(cmd, debug)
    sizes = [int(item) for item in GetListFromStdout(sizes_stdout)]
    return sizes

def GetQualityScores(filename):
    """
    Get a vector of quality scores
    """
    cmd = "cat %s | grep -v version | grep -v Period | "\
        " awk -F'\\t' '($%s != -1)' | awk -F\"\\t\" '($%s == 0)'"\
        " | awk -F'\\t' '{print $(%s)}' "%(filename, STITCH_COL, PARTIAL_COL, SCORE_COL)
    scores_stdout = ExecuteCmd(cmd, debug)
    scores = [int(item) for item in GetListFromStdout(scores_stdout)]
    return scores

def GetDiffsFromRef(filename):
    """
    Get difference from reference values
    """
    cmd = "cat %s | grep -v version | grep -v Period | "\
        "awk -F\"\\t\" '($%s==0)' | awk -F\"\\t\" '{print $%s}'"\
        %(filename, PARTIAL_COL, DIFF_COL)
    diffs_stdout = ExecuteCmd(cmd, debug)
    diffs = [int(item) for item in GetListFromStdout(diffs_stdout)]
    return diffs

def IsPaired(filename):
    """
    Return true if file was aligned in paired-end mode
    """
    l = open(filename, "r").readline()
    return "p1=" in l and "p2=" in l

###########################
def main():
    lobstr_alignment_file = filename

    # 0. Number of aligned reads
    num_aligned_reads = GetLineCount(lobstr_alignment_file, debug)
    if not debug:
        print("%s\tNumber of aligned reads\t%s"%(lobstr_alignment_file, num_aligned_reads))

    # 1. % of reads that were stitched, single ends, mate of single ends
    num_stitch, num_single, num_supp = GetReadTypeNumbers(lobstr_alignment_file)
    if not debug:
        print("%s\tNumber of stitched reads\t%s"%(lobstr_alignment_file, num_stitch))
        print("%s\tNumber of single end reads\t%s"%(lobstr_alignment_file, num_single))
        print("%s\tNumber of supporting end reads\t%s"%(lobstr_alignment_file, num_supp))

    # 2. % of reads that are partial coverage
    perc_partial = GetPercPartial(lobstr_alignment_file)
    if not debug:
        print("%s\tPercent partial aligned reads\t%s"%(lobstr_alignment_file, perc_partial))

    # 3. % of reads aligned on the reverse strand
    perc_rev = GetPercReverse(lobstr_alignment_file)
    if not debug:
        print("%s\tPercent reverse strand reads\t%s"%(lobstr_alignment_file, perc_rev))

    # 4. Mean insert size between aligned paired ends (for paired samples only)
    if IsPaired(lobstr_alignment_file):
        if num_supp != 0:
            mean_ins = GetMeanInsertSize(lobstr_alignment_file)
        else: mean_ins = -1
        if not debug:
            print("%s\tMean insert size\t%s"%(lobstr_alignment_file, mean_ins))

    # 5. % Alignments differing by a non-integer number of repeats
    perc_nonint = GetPercNonIntAlignments(lobstr_alignment_file)
    if not debug:
        print("%s\tPercentage of non-unit allele reads\t%s"%(lobstr_alignment_file, perc_nonint))

    # PLOTS
    if plot:
        # 1. Insert size distribution (for paired samples only)
        plt.clf()
        if IsPaired(lobstr_alignment_file):
            insert_sizes = GetInsertSizes(lobstr_alignment_file)
            n, bins, patches = plt.hist(insert_sizes, range=[0,500])
            plt.xlabel("Insert sizes")
            plt.ylabel("Frequency")
            plt.title("")
            plt.savefig("%s.insertsizes.pdf"%lobstr_alignment_file)

        # 2. Quality score distribution (for fully spanning reads, only)
        plt.clf()
        qual_scores = GetQualityScores(lobstr_alignment_file)
        n, bins, patches = plt.hist(qual_scores,  range=[0,100], bins=range(0,100,10))
        plt.xlabel("Quality scores")
        plt.ylabel("Frequency")
        plt.title("")
        plt.savefig("%s.qualscores.pdf"%lobstr_alignment_file)

        # 3. Difference from reference distribution (separated by period)
        plt.clf()
        diffs = GetDiffsFromRef(lobstr_alignment_file)
        n, bins, patches = plt.hist(diffs, bins=range(-20,20,5), log=True)
        plt.xlabel("Alleles (bp difference from reference)")
        plt.ylabel("Aligned reads (log10)")
        plt.title("")
        plt.savefig("%s.difffromref.pdf"%lobstr_alignment_file)

main()
